/*
 * Configuration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.smartrecruiters.api.config.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.smartrecruiters.api.config.model.CandidatePropertyFilter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * CandidatePropertyAvailability
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2019-11-01T11:44:28.029340+01:00[Europe/Rome]")
public class CandidatePropertyAvailability {
  /**
   * Gets or Sets toUsers
   */
  @JsonAdapter(ToUsersEnum.Adapter.class)
  public enum ToUsersEnum {
    ALL("ALL"),
    
    FULL_ACCESS("FULL_ACCESS");

    private String value;

    ToUsersEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ToUsersEnum fromValue(String value) {
      for (ToUsersEnum b : ToUsersEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ToUsersEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ToUsersEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ToUsersEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ToUsersEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TO_USERS = "toUsers";
  @SerializedName(SERIALIZED_NAME_TO_USERS)
  private ToUsersEnum toUsers;

  /**
   * Gets or Sets context
   */
  @JsonAdapter(ContextEnum.Adapter.class)
  public enum ContextEnum {
    HIRE_FORM("HIRE_FORM"),
    
    OFFER_MANAGEMENT("OFFER_MANAGEMENT"),
    
    CANDIDATE_PROFILE("CANDIDATE_PROFILE");

    private String value;

    ContextEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContextEnum fromValue(String value) {
      for (ContextEnum b : ContextEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContextEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContextEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContextEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContextEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CONTEXT = "context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  private List<ContextEnum> context = null;

  public static final String SERIALIZED_NAME_FOR_ORG_FIELDS = "forOrgFields";
  @SerializedName(SERIALIZED_NAME_FOR_ORG_FIELDS)
  private List<CandidatePropertyFilter> forOrgFields = null;


  public CandidatePropertyAvailability toUsers(ToUsersEnum toUsers) {
    
    this.toUsers = toUsers;
    return this;
  }

   /**
   * Get toUsers
   * @return toUsers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ToUsersEnum getToUsers() {
    return toUsers;
  }



  public void setToUsers(ToUsersEnum toUsers) {
    this.toUsers = toUsers;
  }


  public CandidatePropertyAvailability context(List<ContextEnum> context) {
    
    this.context = context;
    return this;
  }

  public CandidatePropertyAvailability addContextItem(ContextEnum contextItem) {
    if (this.context == null) {
      this.context = new ArrayList<ContextEnum>();
    }
    this.context.add(contextItem);
    return this;
  }

   /**
   * Get context
   * @return context
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ContextEnum> getContext() {
    return context;
  }



  public void setContext(List<ContextEnum> context) {
    this.context = context;
  }


  public CandidatePropertyAvailability forOrgFields(List<CandidatePropertyFilter> forOrgFields) {
    
    this.forOrgFields = forOrgFields;
    return this;
  }

  public CandidatePropertyAvailability addForOrgFieldsItem(CandidatePropertyFilter forOrgFieldsItem) {
    if (this.forOrgFields == null) {
      this.forOrgFields = new ArrayList<CandidatePropertyFilter>();
    }
    this.forOrgFields.add(forOrgFieldsItem);
    return this;
  }

   /**
   * Get forOrgFields
   * @return forOrgFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<CandidatePropertyFilter> getForOrgFields() {
    return forOrgFields;
  }



  public void setForOrgFields(List<CandidatePropertyFilter> forOrgFields) {
    this.forOrgFields = forOrgFields;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CandidatePropertyAvailability candidatePropertyAvailability = (CandidatePropertyAvailability) o;
    return Objects.equals(this.toUsers, candidatePropertyAvailability.toUsers) &&
        Objects.equals(this.context, candidatePropertyAvailability.context) &&
        Objects.equals(this.forOrgFields, candidatePropertyAvailability.forOrgFields);
  }

  @Override
  public int hashCode() {
    return Objects.hash(toUsers, context, forOrgFields);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CandidatePropertyAvailability {\n");
    sb.append("    toUsers: ").append(toIndentedString(toUsers)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    forOrgFields: ").append(toIndentedString(forOrgFields)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

