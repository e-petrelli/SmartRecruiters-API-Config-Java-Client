/*
 * Configuration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.smartrecruiters.api.config;

import com.smartrecruiters.api.config.invoker.ApiCallback;
import com.smartrecruiters.api.config.invoker.ApiClient;
import com.smartrecruiters.api.config.invoker.ApiException;
import com.smartrecruiters.api.config.invoker.ApiResponse;
import com.smartrecruiters.api.config.invoker.Configuration;
import com.smartrecruiters.api.config.invoker.Pair;
import com.smartrecruiters.api.config.invoker.ProgressRequestBody;
import com.smartrecruiters.api.config.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.smartrecruiters.api.config.model.CandidatePropertyDefinition;
import com.smartrecruiters.api.config.model.CandidatePropertyDefinitionList;
import com.smartrecruiters.api.config.model.CandidatePropertyValue;
import com.smartrecruiters.api.config.model.CandidatePropertyValueLabel;
import com.smartrecruiters.api.config.model.CandidatePropertyValueList;
import com.smartrecruiters.api.config.model.CompanyConfiguration;
import com.smartrecruiters.api.config.model.Department;
import com.smartrecruiters.api.config.model.Departments;
import com.smartrecruiters.api.config.model.DependentJobProperties;
import com.smartrecruiters.api.config.model.DependentJobPropertiesIds;
import com.smartrecruiters.api.config.model.DependentJobPropertyValues;
import com.smartrecruiters.api.config.model.DependentJobPropertyValuesRelations;
import com.smartrecruiters.api.config.model.ErrorResponse;
import com.smartrecruiters.api.config.model.HiringProcess;
import com.smartrecruiters.api.config.model.HiringProcesses;
import com.smartrecruiters.api.config.model.Identifiable;
import com.smartrecruiters.api.config.model.JobPropertyDefinition;
import com.smartrecruiters.api.config.model.JobPropertyDefinitionList;
import com.smartrecruiters.api.config.model.JobPropertyValueDefinition;
import com.smartrecruiters.api.config.model.JobPropertyValueDefinitionList;
import com.smartrecruiters.api.config.model.LabelTranslation;
import com.smartrecruiters.api.config.model.LanguageCode;
import com.smartrecruiters.api.config.model.OfferPropertiesDefinition;
import com.smartrecruiters.api.config.model.Path;
import com.smartrecruiters.api.config.model.Properties;
import com.smartrecruiters.api.config.model.Source;
import com.smartrecruiters.api.config.model.SourceTypes;
import com.smartrecruiters.api.config.model.Sources;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConfigurationApi {
    private ApiClient localVarApiClient;

    public ConfigurationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConfigurationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for configurationCandidatePropertiesAll
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationCandidatePropertiesAllCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/candidate-properties";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationCandidatePropertiesAllValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = configurationCandidatePropertiesAllCall(_callback);
        return localVarCall;

    }

    /**
     * Get a list of available candidate properties
     * Get all candidate properties and their configuration for a company
     * @return CandidatePropertyDefinitionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
     </table>
     */
    public CandidatePropertyDefinitionList configurationCandidatePropertiesAll() throws ApiException {
        ApiResponse<CandidatePropertyDefinitionList> localVarResp = configurationCandidatePropertiesAllWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get a list of available candidate properties
     * Get all candidate properties and their configuration for a company
     * @return ApiResponse&lt;CandidatePropertyDefinitionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CandidatePropertyDefinitionList> configurationCandidatePropertiesAllWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = configurationCandidatePropertiesAllValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CandidatePropertyDefinitionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of available candidate properties (asynchronously)
     * Get all candidate properties and their configuration for a company
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationCandidatePropertiesAllAsync(final ApiCallback<CandidatePropertyDefinitionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationCandidatePropertiesAllValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CandidatePropertyDefinitionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationCandidatePropertiesGet
     * @param id candidate property identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Candidate property not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationCandidatePropertiesGetCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/candidate-properties/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationCandidatePropertiesGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling configurationCandidatePropertiesGet(Async)");
        }
        

        okhttp3.Call localVarCall = configurationCandidatePropertiesGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get candidate property by id
     * Get candidate property details and its configuration by id.
     * @param id candidate property identifier (required)
     * @return CandidatePropertyDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Candidate property not found </td><td>  -  </td></tr>
     </table>
     */
    public CandidatePropertyDefinition configurationCandidatePropertiesGet(String id) throws ApiException {
        ApiResponse<CandidatePropertyDefinition> localVarResp = configurationCandidatePropertiesGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get candidate property by id
     * Get candidate property details and its configuration by id.
     * @param id candidate property identifier (required)
     * @return ApiResponse&lt;CandidatePropertyDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Candidate property not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CandidatePropertyDefinition> configurationCandidatePropertiesGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = configurationCandidatePropertiesGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CandidatePropertyDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get candidate property by id (asynchronously)
     * Get candidate property details and its configuration by id.
     * @param id candidate property identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Candidate property not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationCandidatePropertiesGetAsync(String id, final ApiCallback<CandidatePropertyDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationCandidatePropertiesGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CandidatePropertyDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationCandidatePropertiesValuesAll
     * @param id candidate property identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> With code **CANDIDATE_PROPERTY_NOT_SINGLE_SELECT** when candidate property type is not SINGLE_SELECT </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Candidate property not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationCandidatePropertiesValuesAllCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/candidate-properties/{id}/values"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationCandidatePropertiesValuesAllValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling configurationCandidatePropertiesValuesAll(Async)");
        }
        

        okhttp3.Call localVarCall = configurationCandidatePropertiesValuesAllCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get Candidate Property values
     * Lists all available values for given candidate property id. This endpoint is available only for SINGLE_SELECT candidate property type.
     * @param id candidate property identifier (required)
     * @return CandidatePropertyValueList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> With code **CANDIDATE_PROPERTY_NOT_SINGLE_SELECT** when candidate property type is not SINGLE_SELECT </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Candidate property not found </td><td>  -  </td></tr>
     </table>
     */
    public CandidatePropertyValueList configurationCandidatePropertiesValuesAll(String id) throws ApiException {
        ApiResponse<CandidatePropertyValueList> localVarResp = configurationCandidatePropertiesValuesAllWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Candidate Property values
     * Lists all available values for given candidate property id. This endpoint is available only for SINGLE_SELECT candidate property type.
     * @param id candidate property identifier (required)
     * @return ApiResponse&lt;CandidatePropertyValueList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> With code **CANDIDATE_PROPERTY_NOT_SINGLE_SELECT** when candidate property type is not SINGLE_SELECT </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Candidate property not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CandidatePropertyValueList> configurationCandidatePropertiesValuesAllWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = configurationCandidatePropertiesValuesAllValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CandidatePropertyValueList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Candidate Property values (asynchronously)
     * Lists all available values for given candidate property id. This endpoint is available only for SINGLE_SELECT candidate property type.
     * @param id candidate property identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> With code **CANDIDATE_PROPERTY_NOT_SINGLE_SELECT** when candidate property type is not SINGLE_SELECT </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Candidate property not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationCandidatePropertiesValuesAllAsync(String id, final ApiCallback<CandidatePropertyValueList> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationCandidatePropertiesValuesAllValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CandidatePropertyValueList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationCandidatePropertiesValuesCreate
     * @param id candidate property identifier (required)
     * @param candidatePropertyValue Candidate property value. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created candidate property value </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> With codes * **CANDIDATE_PROPERTY_NOT_SINGLE_SELECT** when candidate property type is not SINGLE_SELECT * **CANDIDATE_PROPERTY_VALUES_LIMIT_EXCEEDED** when SINGLE_SELECT candidate property values limit is exceeded  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Candidate property not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> with codes * **CANDIDATE_PROPERTY_VALUE_ID_ALREADY_EXISTS** when candidate property with given id already exists, * **CANDIDATE_PROPERTY_VALUE_LABEL_ALREADY_EXISTS**  when candidate property with given label already exists.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationCandidatePropertiesValuesCreateCall(String id, CandidatePropertyValue candidatePropertyValue, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = candidatePropertyValue;

        // create path and map variables
        String localVarPath = "/configuration/candidate-properties/{id}/values"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationCandidatePropertiesValuesCreateValidateBeforeCall(String id, CandidatePropertyValue candidatePropertyValue, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling configurationCandidatePropertiesValuesCreate(Async)");
        }
        
        // verify the required parameter 'candidatePropertyValue' is set
        if (candidatePropertyValue == null) {
            throw new ApiException("Missing the required parameter 'candidatePropertyValue' when calling configurationCandidatePropertiesValuesCreate(Async)");
        }
        

        okhttp3.Call localVarCall = configurationCandidatePropertiesValuesCreateCall(id, candidatePropertyValue, _callback);
        return localVarCall;

    }

    /**
     * Create candidate property value
     * Create SINGLE_SELECT candidate property value
     * @param id candidate property identifier (required)
     * @param candidatePropertyValue Candidate property value. (required)
     * @return CandidatePropertyValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created candidate property value </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> With codes * **CANDIDATE_PROPERTY_NOT_SINGLE_SELECT** when candidate property type is not SINGLE_SELECT * **CANDIDATE_PROPERTY_VALUES_LIMIT_EXCEEDED** when SINGLE_SELECT candidate property values limit is exceeded  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Candidate property not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> with codes * **CANDIDATE_PROPERTY_VALUE_ID_ALREADY_EXISTS** when candidate property with given id already exists, * **CANDIDATE_PROPERTY_VALUE_LABEL_ALREADY_EXISTS**  when candidate property with given label already exists.  </td><td>  -  </td></tr>
     </table>
     */
    public CandidatePropertyValue configurationCandidatePropertiesValuesCreate(String id, CandidatePropertyValue candidatePropertyValue) throws ApiException {
        ApiResponse<CandidatePropertyValue> localVarResp = configurationCandidatePropertiesValuesCreateWithHttpInfo(id, candidatePropertyValue);
        return localVarResp.getData();
    }

    /**
     * Create candidate property value
     * Create SINGLE_SELECT candidate property value
     * @param id candidate property identifier (required)
     * @param candidatePropertyValue Candidate property value. (required)
     * @return ApiResponse&lt;CandidatePropertyValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created candidate property value </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> With codes * **CANDIDATE_PROPERTY_NOT_SINGLE_SELECT** when candidate property type is not SINGLE_SELECT * **CANDIDATE_PROPERTY_VALUES_LIMIT_EXCEEDED** when SINGLE_SELECT candidate property values limit is exceeded  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Candidate property not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> with codes * **CANDIDATE_PROPERTY_VALUE_ID_ALREADY_EXISTS** when candidate property with given id already exists, * **CANDIDATE_PROPERTY_VALUE_LABEL_ALREADY_EXISTS**  when candidate property with given label already exists.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CandidatePropertyValue> configurationCandidatePropertiesValuesCreateWithHttpInfo(String id, CandidatePropertyValue candidatePropertyValue) throws ApiException {
        okhttp3.Call localVarCall = configurationCandidatePropertiesValuesCreateValidateBeforeCall(id, candidatePropertyValue, null);
        Type localVarReturnType = new TypeToken<CandidatePropertyValue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create candidate property value (asynchronously)
     * Create SINGLE_SELECT candidate property value
     * @param id candidate property identifier (required)
     * @param candidatePropertyValue Candidate property value. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created candidate property value </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> With codes * **CANDIDATE_PROPERTY_NOT_SINGLE_SELECT** when candidate property type is not SINGLE_SELECT * **CANDIDATE_PROPERTY_VALUES_LIMIT_EXCEEDED** when SINGLE_SELECT candidate property values limit is exceeded  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Candidate property not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> with codes * **CANDIDATE_PROPERTY_VALUE_ID_ALREADY_EXISTS** when candidate property with given id already exists, * **CANDIDATE_PROPERTY_VALUE_LABEL_ALREADY_EXISTS**  when candidate property with given label already exists.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationCandidatePropertiesValuesCreateAsync(String id, CandidatePropertyValue candidatePropertyValue, final ApiCallback<CandidatePropertyValue> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationCandidatePropertiesValuesCreateValidateBeforeCall(id, candidatePropertyValue, _callback);
        Type localVarReturnType = new TypeToken<CandidatePropertyValue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationCandidatePropertiesValuesGet
     * @param id candidate property identifier (required)
     * @param valueId candidate property&#39;s value identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> With code **CANDIDATE_PROPERTY_NOT_SINGLE_SELECT** when candidate property type is not SINGLE_SELECT </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes: * **CANDIDATE_PROPERTY_NOT_FOUND** when candidate property with given id does not exist, * **CANDIDATE_PROPERTY_VALUE_NOT_FOUND**  when candidate property value with given id does not exist.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationCandidatePropertiesValuesGetCall(String id, String valueId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/candidate-properties/{id}/values/{valueId}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "valueId" + "\\}", localVarApiClient.escapeString(valueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationCandidatePropertiesValuesGetValidateBeforeCall(String id, String valueId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling configurationCandidatePropertiesValuesGet(Async)");
        }
        
        // verify the required parameter 'valueId' is set
        if (valueId == null) {
            throw new ApiException("Missing the required parameter 'valueId' when calling configurationCandidatePropertiesValuesGet(Async)");
        }
        

        okhttp3.Call localVarCall = configurationCandidatePropertiesValuesGetCall(id, valueId, _callback);
        return localVarCall;

    }

    /**
     * Get Candidate Property value by id
     * Get Candidate Property value by its id.
     * @param id candidate property identifier (required)
     * @param valueId candidate property&#39;s value identifier (required)
     * @return CandidatePropertyValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> With code **CANDIDATE_PROPERTY_NOT_SINGLE_SELECT** when candidate property type is not SINGLE_SELECT </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes: * **CANDIDATE_PROPERTY_NOT_FOUND** when candidate property with given id does not exist, * **CANDIDATE_PROPERTY_VALUE_NOT_FOUND**  when candidate property value with given id does not exist.  </td><td>  -  </td></tr>
     </table>
     */
    public CandidatePropertyValue configurationCandidatePropertiesValuesGet(String id, String valueId) throws ApiException {
        ApiResponse<CandidatePropertyValue> localVarResp = configurationCandidatePropertiesValuesGetWithHttpInfo(id, valueId);
        return localVarResp.getData();
    }

    /**
     * Get Candidate Property value by id
     * Get Candidate Property value by its id.
     * @param id candidate property identifier (required)
     * @param valueId candidate property&#39;s value identifier (required)
     * @return ApiResponse&lt;CandidatePropertyValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> With code **CANDIDATE_PROPERTY_NOT_SINGLE_SELECT** when candidate property type is not SINGLE_SELECT </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes: * **CANDIDATE_PROPERTY_NOT_FOUND** when candidate property with given id does not exist, * **CANDIDATE_PROPERTY_VALUE_NOT_FOUND**  when candidate property value with given id does not exist.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CandidatePropertyValue> configurationCandidatePropertiesValuesGetWithHttpInfo(String id, String valueId) throws ApiException {
        okhttp3.Call localVarCall = configurationCandidatePropertiesValuesGetValidateBeforeCall(id, valueId, null);
        Type localVarReturnType = new TypeToken<CandidatePropertyValue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Candidate Property value by id (asynchronously)
     * Get Candidate Property value by its id.
     * @param id candidate property identifier (required)
     * @param valueId candidate property&#39;s value identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> With code **CANDIDATE_PROPERTY_NOT_SINGLE_SELECT** when candidate property type is not SINGLE_SELECT </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes: * **CANDIDATE_PROPERTY_NOT_FOUND** when candidate property with given id does not exist, * **CANDIDATE_PROPERTY_VALUE_NOT_FOUND**  when candidate property value with given id does not exist.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationCandidatePropertiesValuesGetAsync(String id, String valueId, final ApiCallback<CandidatePropertyValue> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationCandidatePropertiesValuesGetValidateBeforeCall(id, valueId, _callback);
        Type localVarReturnType = new TypeToken<CandidatePropertyValue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationCandidatePropertiesValuesUpdate
     * @param id candidate property identifier (required)
     * @param valueId candidate property&#39;s value identifier (required)
     * @param candidatePropertyValueLabel Candidate property value label. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Updated candidate property value </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> With code **CANDIDATE_PROPERTY_NOT_SINGLE_SELECT** when candidate property type is not SINGLE_SELECT </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes: * **CANDIDATE_PROPERTY_NOT_FOUND** when candidate property with given id does not exist, * **CANDIDATE_PROPERTY_VALUE_NOT_FOUND**  when candidate property value with given id does not exist.  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> with code **CANDIDATE_PROPERTY_VALUE_LABEL_ALREADY_EXISTS** when candidate property with given label already exists.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationCandidatePropertiesValuesUpdateCall(String id, String valueId, CandidatePropertyValueLabel candidatePropertyValueLabel, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = candidatePropertyValueLabel;

        // create path and map variables
        String localVarPath = "/configuration/candidate-properties/{id}/values/{valueId}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "valueId" + "\\}", localVarApiClient.escapeString(valueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationCandidatePropertiesValuesUpdateValidateBeforeCall(String id, String valueId, CandidatePropertyValueLabel candidatePropertyValueLabel, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling configurationCandidatePropertiesValuesUpdate(Async)");
        }
        
        // verify the required parameter 'valueId' is set
        if (valueId == null) {
            throw new ApiException("Missing the required parameter 'valueId' when calling configurationCandidatePropertiesValuesUpdate(Async)");
        }
        
        // verify the required parameter 'candidatePropertyValueLabel' is set
        if (candidatePropertyValueLabel == null) {
            throw new ApiException("Missing the required parameter 'candidatePropertyValueLabel' when calling configurationCandidatePropertiesValuesUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = configurationCandidatePropertiesValuesUpdateCall(id, valueId, candidatePropertyValueLabel, _callback);
        return localVarCall;

    }

    /**
     * Update candidate property value label
     * Update candidate property value label
     * @param id candidate property identifier (required)
     * @param valueId candidate property&#39;s value identifier (required)
     * @param candidatePropertyValueLabel Candidate property value label. (required)
     * @return CandidatePropertyValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Updated candidate property value </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> With code **CANDIDATE_PROPERTY_NOT_SINGLE_SELECT** when candidate property type is not SINGLE_SELECT </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes: * **CANDIDATE_PROPERTY_NOT_FOUND** when candidate property with given id does not exist, * **CANDIDATE_PROPERTY_VALUE_NOT_FOUND**  when candidate property value with given id does not exist.  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> with code **CANDIDATE_PROPERTY_VALUE_LABEL_ALREADY_EXISTS** when candidate property with given label already exists.  </td><td>  -  </td></tr>
     </table>
     */
    public CandidatePropertyValue configurationCandidatePropertiesValuesUpdate(String id, String valueId, CandidatePropertyValueLabel candidatePropertyValueLabel) throws ApiException {
        ApiResponse<CandidatePropertyValue> localVarResp = configurationCandidatePropertiesValuesUpdateWithHttpInfo(id, valueId, candidatePropertyValueLabel);
        return localVarResp.getData();
    }

    /**
     * Update candidate property value label
     * Update candidate property value label
     * @param id candidate property identifier (required)
     * @param valueId candidate property&#39;s value identifier (required)
     * @param candidatePropertyValueLabel Candidate property value label. (required)
     * @return ApiResponse&lt;CandidatePropertyValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Updated candidate property value </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> With code **CANDIDATE_PROPERTY_NOT_SINGLE_SELECT** when candidate property type is not SINGLE_SELECT </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes: * **CANDIDATE_PROPERTY_NOT_FOUND** when candidate property with given id does not exist, * **CANDIDATE_PROPERTY_VALUE_NOT_FOUND**  when candidate property value with given id does not exist.  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> with code **CANDIDATE_PROPERTY_VALUE_LABEL_ALREADY_EXISTS** when candidate property with given label already exists.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CandidatePropertyValue> configurationCandidatePropertiesValuesUpdateWithHttpInfo(String id, String valueId, CandidatePropertyValueLabel candidatePropertyValueLabel) throws ApiException {
        okhttp3.Call localVarCall = configurationCandidatePropertiesValuesUpdateValidateBeforeCall(id, valueId, candidatePropertyValueLabel, null);
        Type localVarReturnType = new TypeToken<CandidatePropertyValue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update candidate property value label (asynchronously)
     * Update candidate property value label
     * @param id candidate property identifier (required)
     * @param valueId candidate property&#39;s value identifier (required)
     * @param candidatePropertyValueLabel Candidate property value label. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Updated candidate property value </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> With code **CANDIDATE_PROPERTY_NOT_SINGLE_SELECT** when candidate property type is not SINGLE_SELECT </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes: * **CANDIDATE_PROPERTY_NOT_FOUND** when candidate property with given id does not exist, * **CANDIDATE_PROPERTY_VALUE_NOT_FOUND**  when candidate property value with given id does not exist.  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> with code **CANDIDATE_PROPERTY_VALUE_LABEL_ALREADY_EXISTS** when candidate property with given label already exists.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationCandidatePropertiesValuesUpdateAsync(String id, String valueId, CandidatePropertyValueLabel candidatePropertyValueLabel, final ApiCallback<CandidatePropertyValue> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationCandidatePropertiesValuesUpdateValidateBeforeCall(id, valueId, candidatePropertyValueLabel, _callback);
        Type localVarReturnType = new TypeToken<CandidatePropertyValue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationCompanyMy
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationCompanyMyCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/company";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationCompanyMyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = configurationCompanyMyCall(_callback);
        return localVarCall;

    }

    /**
     * Get company information
     * Get all information about your company.
     * @return CompanyConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CompanyConfiguration configurationCompanyMy() throws ApiException {
        ApiResponse<CompanyConfiguration> localVarResp = configurationCompanyMyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get company information
     * Get all information about your company.
     * @return ApiResponse&lt;CompanyConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompanyConfiguration> configurationCompanyMyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = configurationCompanyMyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CompanyConfiguration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get company information (asynchronously)
     * Get all information about your company.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationCompanyMyAsync(final ApiCallback<CompanyConfiguration> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationCompanyMyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CompanyConfiguration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationDepartmentAll
     * @param acceptLanguage language of returned content (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Department list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationDepartmentAllCall(LanguageCode acceptLanguage, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/departments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationDepartmentAllValidateBeforeCall(LanguageCode acceptLanguage, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = configurationDepartmentAllCall(acceptLanguage, _callback);
        return localVarCall;

    }

    /**
     * Get departments
     * 
     * @param acceptLanguage language of returned content (optional)
     * @return Departments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Department list </td><td>  -  </td></tr>
     </table>
     */
    public Departments configurationDepartmentAll(LanguageCode acceptLanguage) throws ApiException {
        ApiResponse<Departments> localVarResp = configurationDepartmentAllWithHttpInfo(acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Get departments
     * 
     * @param acceptLanguage language of returned content (optional)
     * @return ApiResponse&lt;Departments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Department list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Departments> configurationDepartmentAllWithHttpInfo(LanguageCode acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = configurationDepartmentAllValidateBeforeCall(acceptLanguage, null);
        Type localVarReturnType = new TypeToken<Departments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get departments (asynchronously)
     * 
     * @param acceptLanguage language of returned content (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Department list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationDepartmentAllAsync(LanguageCode acceptLanguage, final ApiCallback<Departments> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationDepartmentAllValidateBeforeCall(acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<Departments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationDepartmentCreate
     * @param department department to be created (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created department </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationDepartmentCreateCall(Department department, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = department;

        // create path and map variables
        String localVarPath = "/configuration/departments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationDepartmentCreateValidateBeforeCall(Department department, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'department' is set
        if (department == null) {
            throw new ApiException("Missing the required parameter 'department' when calling configurationDepartmentCreate(Async)");
        }
        

        okhttp3.Call localVarCall = configurationDepartmentCreateCall(department, _callback);
        return localVarCall;

    }

    /**
     * Creates department
     * 
     * @param department department to be created (required)
     * @return Department
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created department </td><td>  -  </td></tr>
     </table>
     */
    public Department configurationDepartmentCreate(Department department) throws ApiException {
        ApiResponse<Department> localVarResp = configurationDepartmentCreateWithHttpInfo(department);
        return localVarResp.getData();
    }

    /**
     * Creates department
     * 
     * @param department department to be created (required)
     * @return ApiResponse&lt;Department&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created department </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Department> configurationDepartmentCreateWithHttpInfo(Department department) throws ApiException {
        okhttp3.Call localVarCall = configurationDepartmentCreateValidateBeforeCall(department, null);
        Type localVarReturnType = new TypeToken<Department>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates department (asynchronously)
     * 
     * @param department department to be created (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created department </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationDepartmentCreateAsync(Department department, final ApiCallback<Department> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationDepartmentCreateValidateBeforeCall(department, _callback);
        Type localVarReturnType = new TypeToken<Department>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationDepartmentGet
     * @param id Identifier of a department (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Department </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Department not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationDepartmentGetCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/departments/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationDepartmentGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling configurationDepartmentGet(Async)");
        }
        

        okhttp3.Call localVarCall = configurationDepartmentGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get department
     * 
     * @param id Identifier of a department (required)
     * @return Department
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Department </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Department not found </td><td>  -  </td></tr>
     </table>
     */
    public Department configurationDepartmentGet(String id) throws ApiException {
        ApiResponse<Department> localVarResp = configurationDepartmentGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get department
     * 
     * @param id Identifier of a department (required)
     * @return ApiResponse&lt;Department&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Department </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Department not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Department> configurationDepartmentGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = configurationDepartmentGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Department>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get department (asynchronously)
     * 
     * @param id Identifier of a department (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Department </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Department not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationDepartmentGetAsync(String id, final ApiCallback<Department> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationDepartmentGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Department>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationHiringProcessAll
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hiring processes list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationHiringProcessAllCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/hiring-processes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationHiringProcessAllValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = configurationHiringProcessAllCall(_callback);
        return localVarCall;

    }

    /**
     * Get list of hiring process
     * 
     * @return HiringProcesses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hiring processes list </td><td>  -  </td></tr>
     </table>
     */
    public HiringProcesses configurationHiringProcessAll() throws ApiException {
        ApiResponse<HiringProcesses> localVarResp = configurationHiringProcessAllWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get list of hiring process
     * 
     * @return ApiResponse&lt;HiringProcesses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hiring processes list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HiringProcesses> configurationHiringProcessAllWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = configurationHiringProcessAllValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<HiringProcesses>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get list of hiring process (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hiring processes list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationHiringProcessAllAsync(final ApiCallback<HiringProcesses> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationHiringProcessAllValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<HiringProcesses>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationHiringProcessGet
     * @param id Identifier of a hiring process (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hiring process </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Hiring process not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationHiringProcessGetCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/hiring-processes/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationHiringProcessGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling configurationHiringProcessGet(Async)");
        }
        

        okhttp3.Call localVarCall = configurationHiringProcessGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get hiring process
     * 
     * @param id Identifier of a hiring process (required)
     * @return HiringProcess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hiring process </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Hiring process not found </td><td>  -  </td></tr>
     </table>
     */
    public HiringProcess configurationHiringProcessGet(String id) throws ApiException {
        ApiResponse<HiringProcess> localVarResp = configurationHiringProcessGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get hiring process
     * 
     * @param id Identifier of a hiring process (required)
     * @return ApiResponse&lt;HiringProcess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hiring process </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Hiring process not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HiringProcess> configurationHiringProcessGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = configurationHiringProcessGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<HiringProcess>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get hiring process (asynchronously)
     * 
     * @param id Identifier of a hiring process (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hiring process </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Hiring process not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationHiringProcessGetAsync(String id, final ApiCallback<HiringProcess> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationHiringProcessGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<HiringProcess>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationJobPropertiesActivate
     * @param id job property identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job property not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> When trying to activate job property that has no active values </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationJobPropertiesActivateCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/job-properties/{id}/activation"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationJobPropertiesActivateValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling configurationJobPropertiesActivate(Async)");
        }
        

        okhttp3.Call localVarCall = configurationJobPropertiesActivateCall(id, _callback);
        return localVarCall;

    }

    /**
     * Activate a job property
     * Activates a job property with given id.
     * @param id job property identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job property not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> When trying to activate job property that has no active values </td><td>  -  </td></tr>
     </table>
     */
    public void configurationJobPropertiesActivate(String id) throws ApiException {
        configurationJobPropertiesActivateWithHttpInfo(id);
    }

    /**
     * Activate a job property
     * Activates a job property with given id.
     * @param id job property identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job property not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> When trying to activate job property that has no active values </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> configurationJobPropertiesActivateWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = configurationJobPropertiesActivateValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Activate a job property (asynchronously)
     * Activates a job property with given id.
     * @param id job property identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job property not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> When trying to activate job property that has no active values </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationJobPropertiesActivateAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationJobPropertiesActivateValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationJobPropertiesAll
     * @param acceptLanguage language of returned content (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationJobPropertiesAllCall(LanguageCode acceptLanguage, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/job-properties";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationJobPropertiesAllValidateBeforeCall(LanguageCode acceptLanguage, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = configurationJobPropertiesAllCall(acceptLanguage, _callback);
        return localVarCall;

    }

    /**
     * Get a list of available job properties
     * Get a list of available job properties.
     * @param acceptLanguage language of returned content (optional)
     * @return JobPropertyDefinitionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public JobPropertyDefinitionList configurationJobPropertiesAll(LanguageCode acceptLanguage) throws ApiException {
        ApiResponse<JobPropertyDefinitionList> localVarResp = configurationJobPropertiesAllWithHttpInfo(acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Get a list of available job properties
     * Get a list of available job properties.
     * @param acceptLanguage language of returned content (optional)
     * @return ApiResponse&lt;JobPropertyDefinitionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobPropertyDefinitionList> configurationJobPropertiesAllWithHttpInfo(LanguageCode acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = configurationJobPropertiesAllValidateBeforeCall(acceptLanguage, null);
        Type localVarReturnType = new TypeToken<JobPropertyDefinitionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of available job properties (asynchronously)
     * Get a list of available job properties.
     * @param acceptLanguage language of returned content (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationJobPropertiesAllAsync(LanguageCode acceptLanguage, final ApiCallback<JobPropertyDefinitionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationJobPropertiesAllValidateBeforeCall(acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<JobPropertyDefinitionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationJobPropertiesCreate
     * @param jobPropertyDefinition job property to be created (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created job property </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> With codes: * *JOB_PROPERTY_LIMIT_EXCEEDED* when job properties limit is reached, * *DEFINITION_NAME_IS_NOT_ALLOWED* when job property name is restricted.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationJobPropertiesCreateCall(JobPropertyDefinition jobPropertyDefinition, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = jobPropertyDefinition;

        // create path and map variables
        String localVarPath = "/configuration/job-properties";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationJobPropertiesCreateValidateBeforeCall(JobPropertyDefinition jobPropertyDefinition, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = configurationJobPropertiesCreateCall(jobPropertyDefinition, _callback);
        return localVarCall;

    }

    /**
     * Create a job property
     * Creates a job property
     * @param jobPropertyDefinition job property to be created (optional)
     * @return JobPropertyDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created job property </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> With codes: * *JOB_PROPERTY_LIMIT_EXCEEDED* when job properties limit is reached, * *DEFINITION_NAME_IS_NOT_ALLOWED* when job property name is restricted.  </td><td>  -  </td></tr>
     </table>
     */
    public JobPropertyDefinition configurationJobPropertiesCreate(JobPropertyDefinition jobPropertyDefinition) throws ApiException {
        ApiResponse<JobPropertyDefinition> localVarResp = configurationJobPropertiesCreateWithHttpInfo(jobPropertyDefinition);
        return localVarResp.getData();
    }

    /**
     * Create a job property
     * Creates a job property
     * @param jobPropertyDefinition job property to be created (optional)
     * @return ApiResponse&lt;JobPropertyDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created job property </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> With codes: * *JOB_PROPERTY_LIMIT_EXCEEDED* when job properties limit is reached, * *DEFINITION_NAME_IS_NOT_ALLOWED* when job property name is restricted.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobPropertyDefinition> configurationJobPropertiesCreateWithHttpInfo(JobPropertyDefinition jobPropertyDefinition) throws ApiException {
        okhttp3.Call localVarCall = configurationJobPropertiesCreateValidateBeforeCall(jobPropertyDefinition, null);
        Type localVarReturnType = new TypeToken<JobPropertyDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a job property (asynchronously)
     * Creates a job property
     * @param jobPropertyDefinition job property to be created (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created job property </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> With codes: * *JOB_PROPERTY_LIMIT_EXCEEDED* when job properties limit is reached, * *DEFINITION_NAME_IS_NOT_ALLOWED* when job property name is restricted.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationJobPropertiesCreateAsync(JobPropertyDefinition jobPropertyDefinition, final ApiCallback<JobPropertyDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationJobPropertiesCreateValidateBeforeCall(jobPropertyDefinition, _callback);
        Type localVarReturnType = new TypeToken<JobPropertyDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationJobPropertiesDeactivate
     * @param id job property identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job property not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationJobPropertiesDeactivateCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/job-properties/{id}/activation"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationJobPropertiesDeactivateValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling configurationJobPropertiesDeactivate(Async)");
        }
        

        okhttp3.Call localVarCall = configurationJobPropertiesDeactivateCall(id, _callback);
        return localVarCall;

    }

    /**
     * Deactivate a job property
     * Deactivates a job property.
     * @param id job property identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job property not found </td><td>  -  </td></tr>
     </table>
     */
    public void configurationJobPropertiesDeactivate(String id) throws ApiException {
        configurationJobPropertiesDeactivateWithHttpInfo(id);
    }

    /**
     * Deactivate a job property
     * Deactivates a job property.
     * @param id job property identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job property not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> configurationJobPropertiesDeactivateWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = configurationJobPropertiesDeactivateValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deactivate a job property (asynchronously)
     * Deactivates a job property.
     * @param id job property identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job property not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationJobPropertiesDeactivateAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationJobPropertiesDeactivateValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationJobPropertiesDependentsAll
     * @param id job property identifier (required)
     * @param acceptLanguage language of returned content (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with code * **JOB_PROPERTY_NOT_FOUND** when job property not found,  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationJobPropertiesDependentsAllCall(String id, LanguageCode acceptLanguage, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/job-properties/{id}/dependents"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationJobPropertiesDependentsAllValidateBeforeCall(String id, LanguageCode acceptLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling configurationJobPropertiesDependentsAll(Async)");
        }
        

        okhttp3.Call localVarCall = configurationJobPropertiesDependentsAllCall(id, acceptLanguage, _callback);
        return localVarCall;

    }

    /**
     * Get job property&#39;s dependents
     * Get list of job property&#39;s dependents
     * @param id job property identifier (required)
     * @param acceptLanguage language of returned content (optional)
     * @return DependentJobProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with code * **JOB_PROPERTY_NOT_FOUND** when job property not found,  </td><td>  -  </td></tr>
     </table>
     */
    public DependentJobProperties configurationJobPropertiesDependentsAll(String id, LanguageCode acceptLanguage) throws ApiException {
        ApiResponse<DependentJobProperties> localVarResp = configurationJobPropertiesDependentsAllWithHttpInfo(id, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Get job property&#39;s dependents
     * Get list of job property&#39;s dependents
     * @param id job property identifier (required)
     * @param acceptLanguage language of returned content (optional)
     * @return ApiResponse&lt;DependentJobProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with code * **JOB_PROPERTY_NOT_FOUND** when job property not found,  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DependentJobProperties> configurationJobPropertiesDependentsAllWithHttpInfo(String id, LanguageCode acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = configurationJobPropertiesDependentsAllValidateBeforeCall(id, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<DependentJobProperties>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get job property&#39;s dependents (asynchronously)
     * Get list of job property&#39;s dependents
     * @param id job property identifier (required)
     * @param acceptLanguage language of returned content (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with code * **JOB_PROPERTY_NOT_FOUND** when job property not found,  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationJobPropertiesDependentsAllAsync(String id, LanguageCode acceptLanguage, final ApiCallback<DependentJobProperties> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationJobPropertiesDependentsAllValidateBeforeCall(id, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<DependentJobProperties>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationJobPropertiesDependentsCreate
     * @param id job property identifier (required)
     * @param dependentJobPropertiesIds Job properties&#39; id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with codes * **JOB_PROPERTIES_CIRCULAR_DEPENDENCY** for job properties circular dependency * **JOB_PROPERTY_ALREADY_DEPENDENT** when job property is already other job property&#39;s dependent * **DEPENDENT_JOB_PROPERTY_NOT_FOUND** when dependent job property not found  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code * **PERMISSION_DENIED** when authorized user is not allowed to create dependents  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with code * **JOB_PROPERTY_NOT_FOUND** when job property not found  </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> when input validation fails </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationJobPropertiesDependentsCreateCall(String id, DependentJobPropertiesIds dependentJobPropertiesIds, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = dependentJobPropertiesIds;

        // create path and map variables
        String localVarPath = "/configuration/job-properties/{id}/dependents"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationJobPropertiesDependentsCreateValidateBeforeCall(String id, DependentJobPropertiesIds dependentJobPropertiesIds, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling configurationJobPropertiesDependentsCreate(Async)");
        }
        
        // verify the required parameter 'dependentJobPropertiesIds' is set
        if (dependentJobPropertiesIds == null) {
            throw new ApiException("Missing the required parameter 'dependentJobPropertiesIds' when calling configurationJobPropertiesDependentsCreate(Async)");
        }
        

        okhttp3.Call localVarCall = configurationJobPropertiesDependentsCreateCall(id, dependentJobPropertiesIds, _callback);
        return localVarCall;

    }

    /**
     * Create job property dependents
     * Create dependencies between job properties
     * @param id job property identifier (required)
     * @param dependentJobPropertiesIds Job properties&#39; id (required)
     * @return DependentJobProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with codes * **JOB_PROPERTIES_CIRCULAR_DEPENDENCY** for job properties circular dependency * **JOB_PROPERTY_ALREADY_DEPENDENT** when job property is already other job property&#39;s dependent * **DEPENDENT_JOB_PROPERTY_NOT_FOUND** when dependent job property not found  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code * **PERMISSION_DENIED** when authorized user is not allowed to create dependents  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with code * **JOB_PROPERTY_NOT_FOUND** when job property not found  </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> when input validation fails </td><td>  -  </td></tr>
     </table>
     */
    public DependentJobProperties configurationJobPropertiesDependentsCreate(String id, DependentJobPropertiesIds dependentJobPropertiesIds) throws ApiException {
        ApiResponse<DependentJobProperties> localVarResp = configurationJobPropertiesDependentsCreateWithHttpInfo(id, dependentJobPropertiesIds);
        return localVarResp.getData();
    }

    /**
     * Create job property dependents
     * Create dependencies between job properties
     * @param id job property identifier (required)
     * @param dependentJobPropertiesIds Job properties&#39; id (required)
     * @return ApiResponse&lt;DependentJobProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with codes * **JOB_PROPERTIES_CIRCULAR_DEPENDENCY** for job properties circular dependency * **JOB_PROPERTY_ALREADY_DEPENDENT** when job property is already other job property&#39;s dependent * **DEPENDENT_JOB_PROPERTY_NOT_FOUND** when dependent job property not found  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code * **PERMISSION_DENIED** when authorized user is not allowed to create dependents  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with code * **JOB_PROPERTY_NOT_FOUND** when job property not found  </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> when input validation fails </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DependentJobProperties> configurationJobPropertiesDependentsCreateWithHttpInfo(String id, DependentJobPropertiesIds dependentJobPropertiesIds) throws ApiException {
        okhttp3.Call localVarCall = configurationJobPropertiesDependentsCreateValidateBeforeCall(id, dependentJobPropertiesIds, null);
        Type localVarReturnType = new TypeToken<DependentJobProperties>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create job property dependents (asynchronously)
     * Create dependencies between job properties
     * @param id job property identifier (required)
     * @param dependentJobPropertiesIds Job properties&#39; id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with codes * **JOB_PROPERTIES_CIRCULAR_DEPENDENCY** for job properties circular dependency * **JOB_PROPERTY_ALREADY_DEPENDENT** when job property is already other job property&#39;s dependent * **DEPENDENT_JOB_PROPERTY_NOT_FOUND** when dependent job property not found  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code * **PERMISSION_DENIED** when authorized user is not allowed to create dependents  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with code * **JOB_PROPERTY_NOT_FOUND** when job property not found  </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> when input validation fails </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationJobPropertiesDependentsCreateAsync(String id, DependentJobPropertiesIds dependentJobPropertiesIds, final ApiCallback<DependentJobProperties> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationJobPropertiesDependentsCreateValidateBeforeCall(id, dependentJobPropertiesIds, _callback);
        Type localVarReturnType = new TypeToken<DependentJobProperties>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationJobPropertiesDependentsRemove
     * @param id job property identifier (required)
     * @param dependentId job property&#39;s dependent identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code * **PERMISSION_DENIED** when authorized user is not allowed to remove dependents  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with code * **JOB_PROPERTY_NOT_FOUND** when job property not found * **JOB_PROPERTY_DEPENDENT_NOT_FOUND** when job property dependent not found  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationJobPropertiesDependentsRemoveCall(String id, String dependentId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/job-properties/{id}/dependents/{dependentId}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "dependentId" + "\\}", localVarApiClient.escapeString(dependentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationJobPropertiesDependentsRemoveValidateBeforeCall(String id, String dependentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling configurationJobPropertiesDependentsRemove(Async)");
        }
        
        // verify the required parameter 'dependentId' is set
        if (dependentId == null) {
            throw new ApiException("Missing the required parameter 'dependentId' when calling configurationJobPropertiesDependentsRemove(Async)");
        }
        

        okhttp3.Call localVarCall = configurationJobPropertiesDependentsRemoveCall(id, dependentId, _callback);
        return localVarCall;

    }

    /**
     * Remove job property&#39;s dependent
     * Remove dependency between job properties
     * @param id job property identifier (required)
     * @param dependentId job property&#39;s dependent identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code * **PERMISSION_DENIED** when authorized user is not allowed to remove dependents  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with code * **JOB_PROPERTY_NOT_FOUND** when job property not found * **JOB_PROPERTY_DEPENDENT_NOT_FOUND** when job property dependent not found  </td><td>  -  </td></tr>
     </table>
     */
    public void configurationJobPropertiesDependentsRemove(String id, String dependentId) throws ApiException {
        configurationJobPropertiesDependentsRemoveWithHttpInfo(id, dependentId);
    }

    /**
     * Remove job property&#39;s dependent
     * Remove dependency between job properties
     * @param id job property identifier (required)
     * @param dependentId job property&#39;s dependent identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code * **PERMISSION_DENIED** when authorized user is not allowed to remove dependents  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with code * **JOB_PROPERTY_NOT_FOUND** when job property not found * **JOB_PROPERTY_DEPENDENT_NOT_FOUND** when job property dependent not found  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> configurationJobPropertiesDependentsRemoveWithHttpInfo(String id, String dependentId) throws ApiException {
        okhttp3.Call localVarCall = configurationJobPropertiesDependentsRemoveValidateBeforeCall(id, dependentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove job property&#39;s dependent (asynchronously)
     * Remove dependency between job properties
     * @param id job property identifier (required)
     * @param dependentId job property&#39;s dependent identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code * **PERMISSION_DENIED** when authorized user is not allowed to remove dependents  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with code * **JOB_PROPERTY_NOT_FOUND** when job property not found * **JOB_PROPERTY_DEPENDENT_NOT_FOUND** when job property dependent not found  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationJobPropertiesDependentsRemoveAsync(String id, String dependentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationJobPropertiesDependentsRemoveValidateBeforeCall(id, dependentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationJobPropertiesDependentsValuesAdd
     * @param id job property identifier (required)
     * @param valueId job property&#39;s value identifier (required)
     * @param dependentId job property&#39;s dependent identifier (required)
     * @param identifiable Identifier of job property&#39;s dependent value (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with code: * **JOB_PROPERTY_DEPENDENT_VALUE_NOT_FOUND** when job property dependent value id not found  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code * **PERMISSION_DENIED** when authenticated user is not allowed to configure value dependencies  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes: * **JOB_PROPERTY_NOT_FOUND** when job property not found, * **JOB_PROPERTY_VALUE_NOT_FOUND* when job property value not found * **JOB_PROPERTY_DEPENDENT_NOT_FOUND** when job property dependent not found * **DEPENDENCY_NOT_FOUND** when dependency between properties not found  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> with code: * **JOB_PROPERTY_DEPENDENT_VALUE_EXISTS** when job property&#39;s dependent value exists  </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> when input validation fails </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationJobPropertiesDependentsValuesAddCall(String id, String valueId, String dependentId, Identifiable identifiable, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = identifiable;

        // create path and map variables
        String localVarPath = "/configuration/job-properties/{id}/values/{valueId}/dependents/{dependentId}/values"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "valueId" + "\\}", localVarApiClient.escapeString(valueId.toString()))
            .replaceAll("\\{" + "dependentId" + "\\}", localVarApiClient.escapeString(dependentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationJobPropertiesDependentsValuesAddValidateBeforeCall(String id, String valueId, String dependentId, Identifiable identifiable, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling configurationJobPropertiesDependentsValuesAdd(Async)");
        }
        
        // verify the required parameter 'valueId' is set
        if (valueId == null) {
            throw new ApiException("Missing the required parameter 'valueId' when calling configurationJobPropertiesDependentsValuesAdd(Async)");
        }
        
        // verify the required parameter 'dependentId' is set
        if (dependentId == null) {
            throw new ApiException("Missing the required parameter 'dependentId' when calling configurationJobPropertiesDependentsValuesAdd(Async)");
        }
        
        // verify the required parameter 'identifiable' is set
        if (identifiable == null) {
            throw new ApiException("Missing the required parameter 'identifiable' when calling configurationJobPropertiesDependentsValuesAdd(Async)");
        }
        

        okhttp3.Call localVarCall = configurationJobPropertiesDependentsValuesAddCall(id, valueId, dependentId, identifiable, _callback);
        return localVarCall;

    }

    /**
     * Add job property&#39;s dependent value
     * Add job property&#39;s dependent value for specific job property&#39;s value
     * @param id job property identifier (required)
     * @param valueId job property&#39;s value identifier (required)
     * @param dependentId job property&#39;s dependent identifier (required)
     * @param identifiable Identifier of job property&#39;s dependent value (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with code: * **JOB_PROPERTY_DEPENDENT_VALUE_NOT_FOUND** when job property dependent value id not found  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code * **PERMISSION_DENIED** when authenticated user is not allowed to configure value dependencies  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes: * **JOB_PROPERTY_NOT_FOUND** when job property not found, * **JOB_PROPERTY_VALUE_NOT_FOUND* when job property value not found * **JOB_PROPERTY_DEPENDENT_NOT_FOUND** when job property dependent not found * **DEPENDENCY_NOT_FOUND** when dependency between properties not found  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> with code: * **JOB_PROPERTY_DEPENDENT_VALUE_EXISTS** when job property&#39;s dependent value exists  </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> when input validation fails </td><td>  -  </td></tr>
     </table>
     */
    public void configurationJobPropertiesDependentsValuesAdd(String id, String valueId, String dependentId, Identifiable identifiable) throws ApiException {
        configurationJobPropertiesDependentsValuesAddWithHttpInfo(id, valueId, dependentId, identifiable);
    }

    /**
     * Add job property&#39;s dependent value
     * Add job property&#39;s dependent value for specific job property&#39;s value
     * @param id job property identifier (required)
     * @param valueId job property&#39;s value identifier (required)
     * @param dependentId job property&#39;s dependent identifier (required)
     * @param identifiable Identifier of job property&#39;s dependent value (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with code: * **JOB_PROPERTY_DEPENDENT_VALUE_NOT_FOUND** when job property dependent value id not found  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code * **PERMISSION_DENIED** when authenticated user is not allowed to configure value dependencies  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes: * **JOB_PROPERTY_NOT_FOUND** when job property not found, * **JOB_PROPERTY_VALUE_NOT_FOUND* when job property value not found * **JOB_PROPERTY_DEPENDENT_NOT_FOUND** when job property dependent not found * **DEPENDENCY_NOT_FOUND** when dependency between properties not found  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> with code: * **JOB_PROPERTY_DEPENDENT_VALUE_EXISTS** when job property&#39;s dependent value exists  </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> when input validation fails </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> configurationJobPropertiesDependentsValuesAddWithHttpInfo(String id, String valueId, String dependentId, Identifiable identifiable) throws ApiException {
        okhttp3.Call localVarCall = configurationJobPropertiesDependentsValuesAddValidateBeforeCall(id, valueId, dependentId, identifiable, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add job property&#39;s dependent value (asynchronously)
     * Add job property&#39;s dependent value for specific job property&#39;s value
     * @param id job property identifier (required)
     * @param valueId job property&#39;s value identifier (required)
     * @param dependentId job property&#39;s dependent identifier (required)
     * @param identifiable Identifier of job property&#39;s dependent value (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with code: * **JOB_PROPERTY_DEPENDENT_VALUE_NOT_FOUND** when job property dependent value id not found  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code * **PERMISSION_DENIED** when authenticated user is not allowed to configure value dependencies  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes: * **JOB_PROPERTY_NOT_FOUND** when job property not found, * **JOB_PROPERTY_VALUE_NOT_FOUND* when job property value not found * **JOB_PROPERTY_DEPENDENT_NOT_FOUND** when job property dependent not found * **DEPENDENCY_NOT_FOUND** when dependency between properties not found  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> with code: * **JOB_PROPERTY_DEPENDENT_VALUE_EXISTS** when job property&#39;s dependent value exists  </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> when input validation fails </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationJobPropertiesDependentsValuesAddAsync(String id, String valueId, String dependentId, Identifiable identifiable, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationJobPropertiesDependentsValuesAddValidateBeforeCall(id, valueId, dependentId, identifiable, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationJobPropertiesDependentsValuesAll
     * @param id job property identifier (required)
     * @param dependentId job property&#39;s dependent identifier (required)
     * @param acceptLanguage language of returned content (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes: * **JOB_PROPERTY_NOT_FOUND** when job property not found, * **JOB_PROPERTY_DEPENDENT_NOT_FOUND** when job property dependent not found * **DEPENDENCY_NOT_FOUND** when dependency between properties not found  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationJobPropertiesDependentsValuesAllCall(String id, String dependentId, LanguageCode acceptLanguage, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/job-properties/{id}/dependents/{dependentId}/values"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "dependentId" + "\\}", localVarApiClient.escapeString(dependentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationJobPropertiesDependentsValuesAllValidateBeforeCall(String id, String dependentId, LanguageCode acceptLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling configurationJobPropertiesDependentsValuesAll(Async)");
        }
        
        // verify the required parameter 'dependentId' is set
        if (dependentId == null) {
            throw new ApiException("Missing the required parameter 'dependentId' when calling configurationJobPropertiesDependentsValuesAll(Async)");
        }
        

        okhttp3.Call localVarCall = configurationJobPropertiesDependentsValuesAllCall(id, dependentId, acceptLanguage, _callback);
        return localVarCall;

    }

    /**
     * Get dependent job property&#39;s values
     * Get dependent job property&#39;s values with corelation to the parent field.
     * @param id job property identifier (required)
     * @param dependentId job property&#39;s dependent identifier (required)
     * @param acceptLanguage language of returned content (optional)
     * @return DependentJobPropertyValuesRelations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes: * **JOB_PROPERTY_NOT_FOUND** when job property not found, * **JOB_PROPERTY_DEPENDENT_NOT_FOUND** when job property dependent not found * **DEPENDENCY_NOT_FOUND** when dependency between properties not found  </td><td>  -  </td></tr>
     </table>
     */
    public DependentJobPropertyValuesRelations configurationJobPropertiesDependentsValuesAll(String id, String dependentId, LanguageCode acceptLanguage) throws ApiException {
        ApiResponse<DependentJobPropertyValuesRelations> localVarResp = configurationJobPropertiesDependentsValuesAllWithHttpInfo(id, dependentId, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Get dependent job property&#39;s values
     * Get dependent job property&#39;s values with corelation to the parent field.
     * @param id job property identifier (required)
     * @param dependentId job property&#39;s dependent identifier (required)
     * @param acceptLanguage language of returned content (optional)
     * @return ApiResponse&lt;DependentJobPropertyValuesRelations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes: * **JOB_PROPERTY_NOT_FOUND** when job property not found, * **JOB_PROPERTY_DEPENDENT_NOT_FOUND** when job property dependent not found * **DEPENDENCY_NOT_FOUND** when dependency between properties not found  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DependentJobPropertyValuesRelations> configurationJobPropertiesDependentsValuesAllWithHttpInfo(String id, String dependentId, LanguageCode acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = configurationJobPropertiesDependentsValuesAllValidateBeforeCall(id, dependentId, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<DependentJobPropertyValuesRelations>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get dependent job property&#39;s values (asynchronously)
     * Get dependent job property&#39;s values with corelation to the parent field.
     * @param id job property identifier (required)
     * @param dependentId job property&#39;s dependent identifier (required)
     * @param acceptLanguage language of returned content (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes: * **JOB_PROPERTY_NOT_FOUND** when job property not found, * **JOB_PROPERTY_DEPENDENT_NOT_FOUND** when job property dependent not found * **DEPENDENCY_NOT_FOUND** when dependency between properties not found  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationJobPropertiesDependentsValuesAllAsync(String id, String dependentId, LanguageCode acceptLanguage, final ApiCallback<DependentJobPropertyValuesRelations> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationJobPropertiesDependentsValuesAllValidateBeforeCall(id, dependentId, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<DependentJobPropertyValuesRelations>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationJobPropertiesDependentsValuesGet
     * @param id job property identifier (required)
     * @param valueId job property&#39;s value identifier (required)
     * @param dependentId job property&#39;s dependent identifier (required)
     * @param acceptLanguage language of returned content (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes: * **JOB_PROPERTY_NOT_FOUND** when job property not found, * **JOB_PROPERTY_VALUE_NOT_FOUND* when job property value not found * **JOB_PROPERTY_DEPENDENT_NOT_FOUND** when job property dependent not found * **DEPENDENCY_NOT_FOUND** when dependency between properties not found  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationJobPropertiesDependentsValuesGetCall(String id, String valueId, String dependentId, LanguageCode acceptLanguage, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/job-properties/{id}/values/{valueId}/dependents/{dependentId}/values"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "valueId" + "\\}", localVarApiClient.escapeString(valueId.toString()))
            .replaceAll("\\{" + "dependentId" + "\\}", localVarApiClient.escapeString(dependentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationJobPropertiesDependentsValuesGetValidateBeforeCall(String id, String valueId, String dependentId, LanguageCode acceptLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling configurationJobPropertiesDependentsValuesGet(Async)");
        }
        
        // verify the required parameter 'valueId' is set
        if (valueId == null) {
            throw new ApiException("Missing the required parameter 'valueId' when calling configurationJobPropertiesDependentsValuesGet(Async)");
        }
        
        // verify the required parameter 'dependentId' is set
        if (dependentId == null) {
            throw new ApiException("Missing the required parameter 'dependentId' when calling configurationJobPropertiesDependentsValuesGet(Async)");
        }
        

        okhttp3.Call localVarCall = configurationJobPropertiesDependentsValuesGetCall(id, valueId, dependentId, acceptLanguage, _callback);
        return localVarCall;

    }

    /**
     * Get job property&#39;s dependent values
     * Get list of job property&#39;s dependent values for specific job property&#39;s value
     * @param id job property identifier (required)
     * @param valueId job property&#39;s value identifier (required)
     * @param dependentId job property&#39;s dependent identifier (required)
     * @param acceptLanguage language of returned content (optional)
     * @return DependentJobPropertyValues
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes: * **JOB_PROPERTY_NOT_FOUND** when job property not found, * **JOB_PROPERTY_VALUE_NOT_FOUND* when job property value not found * **JOB_PROPERTY_DEPENDENT_NOT_FOUND** when job property dependent not found * **DEPENDENCY_NOT_FOUND** when dependency between properties not found  </td><td>  -  </td></tr>
     </table>
     */
    public DependentJobPropertyValues configurationJobPropertiesDependentsValuesGet(String id, String valueId, String dependentId, LanguageCode acceptLanguage) throws ApiException {
        ApiResponse<DependentJobPropertyValues> localVarResp = configurationJobPropertiesDependentsValuesGetWithHttpInfo(id, valueId, dependentId, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Get job property&#39;s dependent values
     * Get list of job property&#39;s dependent values for specific job property&#39;s value
     * @param id job property identifier (required)
     * @param valueId job property&#39;s value identifier (required)
     * @param dependentId job property&#39;s dependent identifier (required)
     * @param acceptLanguage language of returned content (optional)
     * @return ApiResponse&lt;DependentJobPropertyValues&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes: * **JOB_PROPERTY_NOT_FOUND** when job property not found, * **JOB_PROPERTY_VALUE_NOT_FOUND* when job property value not found * **JOB_PROPERTY_DEPENDENT_NOT_FOUND** when job property dependent not found * **DEPENDENCY_NOT_FOUND** when dependency between properties not found  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DependentJobPropertyValues> configurationJobPropertiesDependentsValuesGetWithHttpInfo(String id, String valueId, String dependentId, LanguageCode acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = configurationJobPropertiesDependentsValuesGetValidateBeforeCall(id, valueId, dependentId, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<DependentJobPropertyValues>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get job property&#39;s dependent values (asynchronously)
     * Get list of job property&#39;s dependent values for specific job property&#39;s value
     * @param id job property identifier (required)
     * @param valueId job property&#39;s value identifier (required)
     * @param dependentId job property&#39;s dependent identifier (required)
     * @param acceptLanguage language of returned content (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes: * **JOB_PROPERTY_NOT_FOUND** when job property not found, * **JOB_PROPERTY_VALUE_NOT_FOUND* when job property value not found * **JOB_PROPERTY_DEPENDENT_NOT_FOUND** when job property dependent not found * **DEPENDENCY_NOT_FOUND** when dependency between properties not found  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationJobPropertiesDependentsValuesGetAsync(String id, String valueId, String dependentId, LanguageCode acceptLanguage, final ApiCallback<DependentJobPropertyValues> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationJobPropertiesDependentsValuesGetValidateBeforeCall(id, valueId, dependentId, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<DependentJobPropertyValues>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationJobPropertiesDependentsValuesRemove
     * @param id job property identifier (required)
     * @param valueId job property&#39;s value identifier (required)
     * @param dependentId job property&#39;s dependent identifier (required)
     * @param dependentValueId job property&#39;s dependent value identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code: * **PERMISSION_DENIED** when authorized user is not allowed to remove dependents  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes: * **JOB_PROPERTY_NOT_FOUND** when job property not found, * **JOB_PROPERTY_VALUE_NOT_FOUND* when job property value not found * **JOB_PROPERTY_DEPENDENT_NOT_FOUND** when job property&#39;s dependent not found * **JOB_PROPERTY_DEPENDENT_VALUE_NOT_FOUND** when job property&#39;s dependent value not found * **DEPENDENCY_NOT_FOUND** when dependency between properties not found  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationJobPropertiesDependentsValuesRemoveCall(String id, String valueId, String dependentId, String dependentValueId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/job-properties/{id}/values/{valueId}/dependents/{dependentId}/values/{dependentValueId}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "valueId" + "\\}", localVarApiClient.escapeString(valueId.toString()))
            .replaceAll("\\{" + "dependentId" + "\\}", localVarApiClient.escapeString(dependentId.toString()))
            .replaceAll("\\{" + "dependentValueId" + "\\}", localVarApiClient.escapeString(dependentValueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationJobPropertiesDependentsValuesRemoveValidateBeforeCall(String id, String valueId, String dependentId, String dependentValueId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling configurationJobPropertiesDependentsValuesRemove(Async)");
        }
        
        // verify the required parameter 'valueId' is set
        if (valueId == null) {
            throw new ApiException("Missing the required parameter 'valueId' when calling configurationJobPropertiesDependentsValuesRemove(Async)");
        }
        
        // verify the required parameter 'dependentId' is set
        if (dependentId == null) {
            throw new ApiException("Missing the required parameter 'dependentId' when calling configurationJobPropertiesDependentsValuesRemove(Async)");
        }
        
        // verify the required parameter 'dependentValueId' is set
        if (dependentValueId == null) {
            throw new ApiException("Missing the required parameter 'dependentValueId' when calling configurationJobPropertiesDependentsValuesRemove(Async)");
        }
        

        okhttp3.Call localVarCall = configurationJobPropertiesDependentsValuesRemoveCall(id, valueId, dependentId, dependentValueId, _callback);
        return localVarCall;

    }

    /**
     * Remove job property&#39;s dependent values relationship
     * Remove relationship between dependent job properties values
     * @param id job property identifier (required)
     * @param valueId job property&#39;s value identifier (required)
     * @param dependentId job property&#39;s dependent identifier (required)
     * @param dependentValueId job property&#39;s dependent value identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code: * **PERMISSION_DENIED** when authorized user is not allowed to remove dependents  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes: * **JOB_PROPERTY_NOT_FOUND** when job property not found, * **JOB_PROPERTY_VALUE_NOT_FOUND* when job property value not found * **JOB_PROPERTY_DEPENDENT_NOT_FOUND** when job property&#39;s dependent not found * **JOB_PROPERTY_DEPENDENT_VALUE_NOT_FOUND** when job property&#39;s dependent value not found * **DEPENDENCY_NOT_FOUND** when dependency between properties not found  </td><td>  -  </td></tr>
     </table>
     */
    public void configurationJobPropertiesDependentsValuesRemove(String id, String valueId, String dependentId, String dependentValueId) throws ApiException {
        configurationJobPropertiesDependentsValuesRemoveWithHttpInfo(id, valueId, dependentId, dependentValueId);
    }

    /**
     * Remove job property&#39;s dependent values relationship
     * Remove relationship between dependent job properties values
     * @param id job property identifier (required)
     * @param valueId job property&#39;s value identifier (required)
     * @param dependentId job property&#39;s dependent identifier (required)
     * @param dependentValueId job property&#39;s dependent value identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code: * **PERMISSION_DENIED** when authorized user is not allowed to remove dependents  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes: * **JOB_PROPERTY_NOT_FOUND** when job property not found, * **JOB_PROPERTY_VALUE_NOT_FOUND* when job property value not found * **JOB_PROPERTY_DEPENDENT_NOT_FOUND** when job property&#39;s dependent not found * **JOB_PROPERTY_DEPENDENT_VALUE_NOT_FOUND** when job property&#39;s dependent value not found * **DEPENDENCY_NOT_FOUND** when dependency between properties not found  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> configurationJobPropertiesDependentsValuesRemoveWithHttpInfo(String id, String valueId, String dependentId, String dependentValueId) throws ApiException {
        okhttp3.Call localVarCall = configurationJobPropertiesDependentsValuesRemoveValidateBeforeCall(id, valueId, dependentId, dependentValueId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove job property&#39;s dependent values relationship (asynchronously)
     * Remove relationship between dependent job properties values
     * @param id job property identifier (required)
     * @param valueId job property&#39;s value identifier (required)
     * @param dependentId job property&#39;s dependent identifier (required)
     * @param dependentValueId job property&#39;s dependent value identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code: * **PERMISSION_DENIED** when authorized user is not allowed to remove dependents  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes: * **JOB_PROPERTY_NOT_FOUND** when job property not found, * **JOB_PROPERTY_VALUE_NOT_FOUND* when job property value not found * **JOB_PROPERTY_DEPENDENT_NOT_FOUND** when job property&#39;s dependent not found * **JOB_PROPERTY_DEPENDENT_VALUE_NOT_FOUND** when job property&#39;s dependent value not found * **DEPENDENCY_NOT_FOUND** when dependency between properties not found  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationJobPropertiesDependentsValuesRemoveAsync(String id, String valueId, String dependentId, String dependentValueId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationJobPropertiesDependentsValuesRemoveValidateBeforeCall(id, valueId, dependentId, dependentValueId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationJobPropertiesGet
     * @param id job property identifier (required)
     * @param acceptLanguage language of returned content (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job property not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationJobPropertiesGetCall(String id, LanguageCode acceptLanguage, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/job-properties/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationJobPropertiesGetValidateBeforeCall(String id, LanguageCode acceptLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling configurationJobPropertiesGet(Async)");
        }
        

        okhttp3.Call localVarCall = configurationJobPropertiesGetCall(id, acceptLanguage, _callback);
        return localVarCall;

    }

    /**
     * Get job property by id
     * Get job property by id
     * @param id job property identifier (required)
     * @param acceptLanguage language of returned content (optional)
     * @return JobPropertyDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job property not found </td><td>  -  </td></tr>
     </table>
     */
    public JobPropertyDefinition configurationJobPropertiesGet(String id, LanguageCode acceptLanguage) throws ApiException {
        ApiResponse<JobPropertyDefinition> localVarResp = configurationJobPropertiesGetWithHttpInfo(id, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Get job property by id
     * Get job property by id
     * @param id job property identifier (required)
     * @param acceptLanguage language of returned content (optional)
     * @return ApiResponse&lt;JobPropertyDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job property not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobPropertyDefinition> configurationJobPropertiesGetWithHttpInfo(String id, LanguageCode acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = configurationJobPropertiesGetValidateBeforeCall(id, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<JobPropertyDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get job property by id (asynchronously)
     * Get job property by id
     * @param id job property identifier (required)
     * @param acceptLanguage language of returned content (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job property not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationJobPropertiesGetAsync(String id, LanguageCode acceptLanguage, final ApiCallback<JobPropertyDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationJobPropertiesGetValidateBeforeCall(id, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<JobPropertyDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationJobPropertiesTranslationsPatch
     * @param id job property identifier (required)
     * @param labelTranslation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Translations accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes   *  *JOB_PROPERTY_NOT_FOUND* - when job property not found  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> There is more than one translation with the same language in the input </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid input: missing required data, invalid format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationJobPropertiesTranslationsPatchCall(String id, List<LabelTranslation> labelTranslation, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = labelTranslation;

        // create path and map variables
        String localVarPath = "/configuration/job-properties/{id}/translations"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationJobPropertiesTranslationsPatchValidateBeforeCall(String id, List<LabelTranslation> labelTranslation, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling configurationJobPropertiesTranslationsPatch(Async)");
        }
        
        // verify the required parameter 'labelTranslation' is set
        if (labelTranslation == null) {
            throw new ApiException("Missing the required parameter 'labelTranslation' when calling configurationJobPropertiesTranslationsPatch(Async)");
        }
        

        okhttp3.Call localVarCall = configurationJobPropertiesTranslationsPatchCall(id, labelTranslation, _callback);
        return localVarCall;

    }

    /**
     * Add a job property&#39;s translations
     * Submit a job property&#39;s translations to different languages
     * @param id job property identifier (required)
     * @param labelTranslation  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Translations accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes   *  *JOB_PROPERTY_NOT_FOUND* - when job property not found  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> There is more than one translation with the same language in the input </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid input: missing required data, invalid format </td><td>  -  </td></tr>
     </table>
     */
    public void configurationJobPropertiesTranslationsPatch(String id, List<LabelTranslation> labelTranslation) throws ApiException {
        configurationJobPropertiesTranslationsPatchWithHttpInfo(id, labelTranslation);
    }

    /**
     * Add a job property&#39;s translations
     * Submit a job property&#39;s translations to different languages
     * @param id job property identifier (required)
     * @param labelTranslation  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Translations accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes   *  *JOB_PROPERTY_NOT_FOUND* - when job property not found  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> There is more than one translation with the same language in the input </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid input: missing required data, invalid format </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> configurationJobPropertiesTranslationsPatchWithHttpInfo(String id, List<LabelTranslation> labelTranslation) throws ApiException {
        okhttp3.Call localVarCall = configurationJobPropertiesTranslationsPatchValidateBeforeCall(id, labelTranslation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a job property&#39;s translations (asynchronously)
     * Submit a job property&#39;s translations to different languages
     * @param id job property identifier (required)
     * @param labelTranslation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Translations accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes   *  *JOB_PROPERTY_NOT_FOUND* - when job property not found  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> There is more than one translation with the same language in the input </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid input: missing required data, invalid format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationJobPropertiesTranslationsPatchAsync(String id, List<LabelTranslation> labelTranslation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationJobPropertiesTranslationsPatchValidateBeforeCall(id, labelTranslation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationJobPropertiesUpdate
     * @param id job property identifier (required)
     * @param path patch request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated job property </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Job property is not editable </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job property not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> With code: * *DEFINITION_NAME_IS_NOT_ALLOWED* when job property name is restricted.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationJobPropertiesUpdateCall(String id, List<Path> path, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = path;

        // create path and map variables
        String localVarPath = "/configuration/job-properties/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationJobPropertiesUpdateValidateBeforeCall(String id, List<Path> path, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling configurationJobPropertiesUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = configurationJobPropertiesUpdateCall(id, path, _callback);
        return localVarCall;

    }

    /**
     * Update a job property
     * Updates a job property.
     * @param id job property identifier (required)
     * @param path patch request (optional)
     * @return JobPropertyDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated job property </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Job property is not editable </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job property not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> With code: * *DEFINITION_NAME_IS_NOT_ALLOWED* when job property name is restricted.  </td><td>  -  </td></tr>
     </table>
     */
    public JobPropertyDefinition configurationJobPropertiesUpdate(String id, List<Path> path) throws ApiException {
        ApiResponse<JobPropertyDefinition> localVarResp = configurationJobPropertiesUpdateWithHttpInfo(id, path);
        return localVarResp.getData();
    }

    /**
     * Update a job property
     * Updates a job property.
     * @param id job property identifier (required)
     * @param path patch request (optional)
     * @return ApiResponse&lt;JobPropertyDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated job property </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Job property is not editable </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job property not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> With code: * *DEFINITION_NAME_IS_NOT_ALLOWED* when job property name is restricted.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobPropertyDefinition> configurationJobPropertiesUpdateWithHttpInfo(String id, List<Path> path) throws ApiException {
        okhttp3.Call localVarCall = configurationJobPropertiesUpdateValidateBeforeCall(id, path, null);
        Type localVarReturnType = new TypeToken<JobPropertyDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a job property (asynchronously)
     * Updates a job property.
     * @param id job property identifier (required)
     * @param path patch request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated job property </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Job property is not editable </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job property not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> With code: * *DEFINITION_NAME_IS_NOT_ALLOWED* when job property name is restricted.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationJobPropertiesUpdateAsync(String id, List<Path> path, final ApiCallback<JobPropertyDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationJobPropertiesUpdateValidateBeforeCall(id, path, _callback);
        Type localVarReturnType = new TypeToken<JobPropertyDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationJobPropertiesValuesArchive
     * @param id job property identifier (required)
     * @param valueId job property&#39;s value identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes: * *JOB_PROPERTY_NOT_FOUND* when job property does not exist * *JOB_PROPERTY_VALUE_NOT_FOUND* when job property value does not exist  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationJobPropertiesValuesArchiveCall(String id, String valueId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/job-properties/{id}/archive-values/{valueId}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "valueId" + "\\}", localVarApiClient.escapeString(valueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationJobPropertiesValuesArchiveValidateBeforeCall(String id, String valueId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling configurationJobPropertiesValuesArchive(Async)");
        }
        
        // verify the required parameter 'valueId' is set
        if (valueId == null) {
            throw new ApiException("Missing the required parameter 'valueId' when calling configurationJobPropertiesValuesArchive(Async)");
        }
        

        okhttp3.Call localVarCall = configurationJobPropertiesValuesArchiveCall(id, valueId, _callback);
        return localVarCall;

    }

    /**
     * Archive a job property value
     * Archive a job property value
     * @param id job property identifier (required)
     * @param valueId job property&#39;s value identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes: * *JOB_PROPERTY_NOT_FOUND* when job property does not exist * *JOB_PROPERTY_VALUE_NOT_FOUND* when job property value does not exist  </td><td>  -  </td></tr>
     </table>
     */
    public void configurationJobPropertiesValuesArchive(String id, String valueId) throws ApiException {
        configurationJobPropertiesValuesArchiveWithHttpInfo(id, valueId);
    }

    /**
     * Archive a job property value
     * Archive a job property value
     * @param id job property identifier (required)
     * @param valueId job property&#39;s value identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes: * *JOB_PROPERTY_NOT_FOUND* when job property does not exist * *JOB_PROPERTY_VALUE_NOT_FOUND* when job property value does not exist  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> configurationJobPropertiesValuesArchiveWithHttpInfo(String id, String valueId) throws ApiException {
        okhttp3.Call localVarCall = configurationJobPropertiesValuesArchiveValidateBeforeCall(id, valueId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Archive a job property value (asynchronously)
     * Archive a job property value
     * @param id job property identifier (required)
     * @param valueId job property&#39;s value identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes: * *JOB_PROPERTY_NOT_FOUND* when job property does not exist * *JOB_PROPERTY_VALUE_NOT_FOUND* when job property value does not exist  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationJobPropertiesValuesArchiveAsync(String id, String valueId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationJobPropertiesValuesArchiveValidateBeforeCall(id, valueId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationJobPropertiesValuesCreate
     * @param id job property identifier (required)
     * @param jobPropertyValueDefinition job property object to be created (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created job property value </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> When job property not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> When job property value with given label already exists. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> When limit of active job property values is reached. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationJobPropertiesValuesCreateCall(String id, JobPropertyValueDefinition jobPropertyValueDefinition, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = jobPropertyValueDefinition;

        // create path and map variables
        String localVarPath = "/configuration/job-properties/{id}/values"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationJobPropertiesValuesCreateValidateBeforeCall(String id, JobPropertyValueDefinition jobPropertyValueDefinition, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling configurationJobPropertiesValuesCreate(Async)");
        }
        

        okhttp3.Call localVarCall = configurationJobPropertiesValuesCreateCall(id, jobPropertyValueDefinition, _callback);
        return localVarCall;

    }

    /**
     * Create a job property value
     * Creates a job property value.
     * @param id job property identifier (required)
     * @param jobPropertyValueDefinition job property object to be created (optional)
     * @return JobPropertyValueDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created job property value </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> When job property not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> When job property value with given label already exists. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> When limit of active job property values is reached. </td><td>  -  </td></tr>
     </table>
     */
    public JobPropertyValueDefinition configurationJobPropertiesValuesCreate(String id, JobPropertyValueDefinition jobPropertyValueDefinition) throws ApiException {
        ApiResponse<JobPropertyValueDefinition> localVarResp = configurationJobPropertiesValuesCreateWithHttpInfo(id, jobPropertyValueDefinition);
        return localVarResp.getData();
    }

    /**
     * Create a job property value
     * Creates a job property value.
     * @param id job property identifier (required)
     * @param jobPropertyValueDefinition job property object to be created (optional)
     * @return ApiResponse&lt;JobPropertyValueDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created job property value </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> When job property not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> When job property value with given label already exists. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> When limit of active job property values is reached. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobPropertyValueDefinition> configurationJobPropertiesValuesCreateWithHttpInfo(String id, JobPropertyValueDefinition jobPropertyValueDefinition) throws ApiException {
        okhttp3.Call localVarCall = configurationJobPropertiesValuesCreateValidateBeforeCall(id, jobPropertyValueDefinition, null);
        Type localVarReturnType = new TypeToken<JobPropertyValueDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a job property value (asynchronously)
     * Creates a job property value.
     * @param id job property identifier (required)
     * @param jobPropertyValueDefinition job property object to be created (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created job property value </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> When job property not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> When job property value with given label already exists. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> When limit of active job property values is reached. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationJobPropertiesValuesCreateAsync(String id, JobPropertyValueDefinition jobPropertyValueDefinition, final ApiCallback<JobPropertyValueDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationJobPropertiesValuesCreateValidateBeforeCall(id, jobPropertyValueDefinition, _callback);
        Type localVarReturnType = new TypeToken<JobPropertyValueDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationJobPropertiesValuesDeprecatedArchive
     * @param id job property identifier (required)
     * @param valueId job property&#39;s value identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes: * *JOB_PROPERTY_NOT_FOUND* when job property does not exist * *JOB_PROPERTY_VALUE_NOT_FOUND* when job property value does not exist  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call configurationJobPropertiesValuesDeprecatedArchiveCall(String id, String valueId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/job-properties/{id}/values/{valueId}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "valueId" + "\\}", localVarApiClient.escapeString(valueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationJobPropertiesValuesDeprecatedArchiveValidateBeforeCall(String id, String valueId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling configurationJobPropertiesValuesDeprecatedArchive(Async)");
        }
        
        // verify the required parameter 'valueId' is set
        if (valueId == null) {
            throw new ApiException("Missing the required parameter 'valueId' when calling configurationJobPropertiesValuesDeprecatedArchive(Async)");
        }
        

        okhttp3.Call localVarCall = configurationJobPropertiesValuesDeprecatedArchiveCall(id, valueId, _callback);
        return localVarCall;

    }

    /**
     * Archive a job property value
     * Archive a job property value. Please use &#x60;PUT /configuration/job-properties/{id}/archive-values/{valueId}&#x60; instead.
     * @param id job property identifier (required)
     * @param valueId job property&#39;s value identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes: * *JOB_PROPERTY_NOT_FOUND* when job property does not exist * *JOB_PROPERTY_VALUE_NOT_FOUND* when job property value does not exist  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void configurationJobPropertiesValuesDeprecatedArchive(String id, String valueId) throws ApiException {
        configurationJobPropertiesValuesDeprecatedArchiveWithHttpInfo(id, valueId);
    }

    /**
     * Archive a job property value
     * Archive a job property value. Please use &#x60;PUT /configuration/job-properties/{id}/archive-values/{valueId}&#x60; instead.
     * @param id job property identifier (required)
     * @param valueId job property&#39;s value identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes: * *JOB_PROPERTY_NOT_FOUND* when job property does not exist * *JOB_PROPERTY_VALUE_NOT_FOUND* when job property value does not exist  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> configurationJobPropertiesValuesDeprecatedArchiveWithHttpInfo(String id, String valueId) throws ApiException {
        okhttp3.Call localVarCall = configurationJobPropertiesValuesDeprecatedArchiveValidateBeforeCall(id, valueId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Archive a job property value (asynchronously)
     * Archive a job property value. Please use &#x60;PUT /configuration/job-properties/{id}/archive-values/{valueId}&#x60; instead.
     * @param id job property identifier (required)
     * @param valueId job property&#39;s value identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes: * *JOB_PROPERTY_NOT_FOUND* when job property does not exist * *JOB_PROPERTY_VALUE_NOT_FOUND* when job property value does not exist  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call configurationJobPropertiesValuesDeprecatedArchiveAsync(String id, String valueId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationJobPropertiesValuesDeprecatedArchiveValidateBeforeCall(id, valueId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationJobPropertiesValuesDeprecatedUnarchive
     * @param id job property identifier (required)
     * @param valueId job property&#39;s value identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes: * *JOB_PROPERTY_NOT_FOUND* when job property does not exist * *JOB_PROPERTY_VALUE_NOT_FOUND* when job property value does not exist  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call configurationJobPropertiesValuesDeprecatedUnarchiveCall(String id, String valueId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/job-properties/{id}/values/{valueId}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "valueId" + "\\}", localVarApiClient.escapeString(valueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationJobPropertiesValuesDeprecatedUnarchiveValidateBeforeCall(String id, String valueId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling configurationJobPropertiesValuesDeprecatedUnarchive(Async)");
        }
        
        // verify the required parameter 'valueId' is set
        if (valueId == null) {
            throw new ApiException("Missing the required parameter 'valueId' when calling configurationJobPropertiesValuesDeprecatedUnarchive(Async)");
        }
        

        okhttp3.Call localVarCall = configurationJobPropertiesValuesDeprecatedUnarchiveCall(id, valueId, _callback);
        return localVarCall;

    }

    /**
     * Unarchive a job property value
     * Unarchive a job property value. &#x60;DELETE /configuration/job-properties/{id}/archive-values/{valueId}&#x60; instead.
     * @param id job property identifier (required)
     * @param valueId job property&#39;s value identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes: * *JOB_PROPERTY_NOT_FOUND* when job property does not exist * *JOB_PROPERTY_VALUE_NOT_FOUND* when job property value does not exist  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void configurationJobPropertiesValuesDeprecatedUnarchive(String id, String valueId) throws ApiException {
        configurationJobPropertiesValuesDeprecatedUnarchiveWithHttpInfo(id, valueId);
    }

    /**
     * Unarchive a job property value
     * Unarchive a job property value. &#x60;DELETE /configuration/job-properties/{id}/archive-values/{valueId}&#x60; instead.
     * @param id job property identifier (required)
     * @param valueId job property&#39;s value identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes: * *JOB_PROPERTY_NOT_FOUND* when job property does not exist * *JOB_PROPERTY_VALUE_NOT_FOUND* when job property value does not exist  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> configurationJobPropertiesValuesDeprecatedUnarchiveWithHttpInfo(String id, String valueId) throws ApiException {
        okhttp3.Call localVarCall = configurationJobPropertiesValuesDeprecatedUnarchiveValidateBeforeCall(id, valueId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unarchive a job property value (asynchronously)
     * Unarchive a job property value. &#x60;DELETE /configuration/job-properties/{id}/archive-values/{valueId}&#x60; instead.
     * @param id job property identifier (required)
     * @param valueId job property&#39;s value identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes: * *JOB_PROPERTY_NOT_FOUND* when job property does not exist * *JOB_PROPERTY_VALUE_NOT_FOUND* when job property value does not exist  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call configurationJobPropertiesValuesDeprecatedUnarchiveAsync(String id, String valueId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationJobPropertiesValuesDeprecatedUnarchiveValidateBeforeCall(id, valueId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationJobPropertiesValuesGet
     * @param id job property identifier (required)
     * @param acceptLanguage language of returned content (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job property not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationJobPropertiesValuesGetCall(String id, LanguageCode acceptLanguage, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/job-properties/{id}/values"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationJobPropertiesValuesGetValidateBeforeCall(String id, LanguageCode acceptLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling configurationJobPropertiesValuesGet(Async)");
        }
        

        okhttp3.Call localVarCall = configurationJobPropertiesValuesGetCall(id, acceptLanguage, _callback);
        return localVarCall;

    }

    /**
     * Get available job property values
     * Get available job property values.
     * @param id job property identifier (required)
     * @param acceptLanguage language of returned content (optional)
     * @return JobPropertyValueDefinitionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job property not found </td><td>  -  </td></tr>
     </table>
     */
    public JobPropertyValueDefinitionList configurationJobPropertiesValuesGet(String id, LanguageCode acceptLanguage) throws ApiException {
        ApiResponse<JobPropertyValueDefinitionList> localVarResp = configurationJobPropertiesValuesGetWithHttpInfo(id, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Get available job property values
     * Get available job property values.
     * @param id job property identifier (required)
     * @param acceptLanguage language of returned content (optional)
     * @return ApiResponse&lt;JobPropertyValueDefinitionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job property not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobPropertyValueDefinitionList> configurationJobPropertiesValuesGetWithHttpInfo(String id, LanguageCode acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = configurationJobPropertiesValuesGetValidateBeforeCall(id, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<JobPropertyValueDefinitionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get available job property values (asynchronously)
     * Get available job property values.
     * @param id job property identifier (required)
     * @param acceptLanguage language of returned content (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job property not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationJobPropertiesValuesGetAsync(String id, LanguageCode acceptLanguage, final ApiCallback<JobPropertyValueDefinitionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationJobPropertiesValuesGetValidateBeforeCall(id, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<JobPropertyValueDefinitionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationJobPropertiesValuesTranslationsPatch
     * @param id job property identifier (required)
     * @param valueId job property&#39;s value identifier (required)
     * @param labelTranslation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Translations accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes   *  *JOB_PROPERTY_NOT_FOUND* - when job property not found   *  *JOB_PROPERTY_VALUE_NOT_FOUND* when job property&#39;s value with given id does not exist.  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> There is more than one translation with the same language in the input </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid input: missing required data, invalid format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationJobPropertiesValuesTranslationsPatchCall(String id, String valueId, List<LabelTranslation> labelTranslation, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = labelTranslation;

        // create path and map variables
        String localVarPath = "/configuration/job-properties/{id}/values/{valueId}/translations"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "valueId" + "\\}", localVarApiClient.escapeString(valueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationJobPropertiesValuesTranslationsPatchValidateBeforeCall(String id, String valueId, List<LabelTranslation> labelTranslation, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling configurationJobPropertiesValuesTranslationsPatch(Async)");
        }
        
        // verify the required parameter 'valueId' is set
        if (valueId == null) {
            throw new ApiException("Missing the required parameter 'valueId' when calling configurationJobPropertiesValuesTranslationsPatch(Async)");
        }
        
        // verify the required parameter 'labelTranslation' is set
        if (labelTranslation == null) {
            throw new ApiException("Missing the required parameter 'labelTranslation' when calling configurationJobPropertiesValuesTranslationsPatch(Async)");
        }
        

        okhttp3.Call localVarCall = configurationJobPropertiesValuesTranslationsPatchCall(id, valueId, labelTranslation, _callback);
        return localVarCall;

    }

    /**
     * Add a job property value&#39;s translations
     * Submit a job property value&#39;s translations to different languages
     * @param id job property identifier (required)
     * @param valueId job property&#39;s value identifier (required)
     * @param labelTranslation  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Translations accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes   *  *JOB_PROPERTY_NOT_FOUND* - when job property not found   *  *JOB_PROPERTY_VALUE_NOT_FOUND* when job property&#39;s value with given id does not exist.  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> There is more than one translation with the same language in the input </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid input: missing required data, invalid format </td><td>  -  </td></tr>
     </table>
     */
    public void configurationJobPropertiesValuesTranslationsPatch(String id, String valueId, List<LabelTranslation> labelTranslation) throws ApiException {
        configurationJobPropertiesValuesTranslationsPatchWithHttpInfo(id, valueId, labelTranslation);
    }

    /**
     * Add a job property value&#39;s translations
     * Submit a job property value&#39;s translations to different languages
     * @param id job property identifier (required)
     * @param valueId job property&#39;s value identifier (required)
     * @param labelTranslation  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Translations accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes   *  *JOB_PROPERTY_NOT_FOUND* - when job property not found   *  *JOB_PROPERTY_VALUE_NOT_FOUND* when job property&#39;s value with given id does not exist.  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> There is more than one translation with the same language in the input </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid input: missing required data, invalid format </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> configurationJobPropertiesValuesTranslationsPatchWithHttpInfo(String id, String valueId, List<LabelTranslation> labelTranslation) throws ApiException {
        okhttp3.Call localVarCall = configurationJobPropertiesValuesTranslationsPatchValidateBeforeCall(id, valueId, labelTranslation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a job property value&#39;s translations (asynchronously)
     * Submit a job property value&#39;s translations to different languages
     * @param id job property identifier (required)
     * @param valueId job property&#39;s value identifier (required)
     * @param labelTranslation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Translations accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes   *  *JOB_PROPERTY_NOT_FOUND* - when job property not found   *  *JOB_PROPERTY_VALUE_NOT_FOUND* when job property&#39;s value with given id does not exist.  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> There is more than one translation with the same language in the input </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid input: missing required data, invalid format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationJobPropertiesValuesTranslationsPatchAsync(String id, String valueId, List<LabelTranslation> labelTranslation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationJobPropertiesValuesTranslationsPatchValidateBeforeCall(id, valueId, labelTranslation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationJobPropertiesValuesUnarchive
     * @param id job property identifier (required)
     * @param valueId job property&#39;s value identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes: * *JOB_PROPERTY_NOT_FOUND* when job property does not exist * *JOB_PROPERTY_VALUE_NOT_FOUND* when job property value does not exist  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationJobPropertiesValuesUnarchiveCall(String id, String valueId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/job-properties/{id}/archive-values/{valueId}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "valueId" + "\\}", localVarApiClient.escapeString(valueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationJobPropertiesValuesUnarchiveValidateBeforeCall(String id, String valueId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling configurationJobPropertiesValuesUnarchive(Async)");
        }
        
        // verify the required parameter 'valueId' is set
        if (valueId == null) {
            throw new ApiException("Missing the required parameter 'valueId' when calling configurationJobPropertiesValuesUnarchive(Async)");
        }
        

        okhttp3.Call localVarCall = configurationJobPropertiesValuesUnarchiveCall(id, valueId, _callback);
        return localVarCall;

    }

    /**
     * Unarchive a job property value
     * Unarchive a job property value
     * @param id job property identifier (required)
     * @param valueId job property&#39;s value identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes: * *JOB_PROPERTY_NOT_FOUND* when job property does not exist * *JOB_PROPERTY_VALUE_NOT_FOUND* when job property value does not exist  </td><td>  -  </td></tr>
     </table>
     */
    public void configurationJobPropertiesValuesUnarchive(String id, String valueId) throws ApiException {
        configurationJobPropertiesValuesUnarchiveWithHttpInfo(id, valueId);
    }

    /**
     * Unarchive a job property value
     * Unarchive a job property value
     * @param id job property identifier (required)
     * @param valueId job property&#39;s value identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes: * *JOB_PROPERTY_NOT_FOUND* when job property does not exist * *JOB_PROPERTY_VALUE_NOT_FOUND* when job property value does not exist  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> configurationJobPropertiesValuesUnarchiveWithHttpInfo(String id, String valueId) throws ApiException {
        okhttp3.Call localVarCall = configurationJobPropertiesValuesUnarchiveValidateBeforeCall(id, valueId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unarchive a job property value (asynchronously)
     * Unarchive a job property value
     * @param id job property identifier (required)
     * @param valueId job property&#39;s value identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes: * *JOB_PROPERTY_NOT_FOUND* when job property does not exist * *JOB_PROPERTY_VALUE_NOT_FOUND* when job property value does not exist  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationJobPropertiesValuesUnarchiveAsync(String id, String valueId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationJobPropertiesValuesUnarchiveValidateBeforeCall(id, valueId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationJobPropertiesValuesUpdate
     * @param id job property identifier (required)
     * @param valueId job property&#39;s value identifier (required)
     * @param path patch request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes: * *JOB_PROPERTY_NOT_FOUND* when job property does not exist * *JOB_PROPERTY_VALUE_NOT_FOUND* when job property value does not exist  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> When label being updated conflicts with already existing one. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> with input validation fails or with codes: * *ACTIVE_VALUES_LIMIT_REACHED* when limit of active job property values is reached. * *JSON_PATCH_INVALID* when patch json is invalid.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationJobPropertiesValuesUpdateCall(String id, String valueId, List<Path> path, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = path;

        // create path and map variables
        String localVarPath = "/configuration/job-properties/{id}/values/{valueId}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "valueId" + "\\}", localVarApiClient.escapeString(valueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationJobPropertiesValuesUpdateValidateBeforeCall(String id, String valueId, List<Path> path, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling configurationJobPropertiesValuesUpdate(Async)");
        }
        
        // verify the required parameter 'valueId' is set
        if (valueId == null) {
            throw new ApiException("Missing the required parameter 'valueId' when calling configurationJobPropertiesValuesUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = configurationJobPropertiesValuesUpdateCall(id, valueId, path, _callback);
        return localVarCall;

    }

    /**
     * Update a job property value
     * Update a job property value. Returns an updated job property value object.
     * @param id job property identifier (required)
     * @param valueId job property&#39;s value identifier (required)
     * @param path patch request (optional)
     * @return JobPropertyValueDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes: * *JOB_PROPERTY_NOT_FOUND* when job property does not exist * *JOB_PROPERTY_VALUE_NOT_FOUND* when job property value does not exist  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> When label being updated conflicts with already existing one. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> with input validation fails or with codes: * *ACTIVE_VALUES_LIMIT_REACHED* when limit of active job property values is reached. * *JSON_PATCH_INVALID* when patch json is invalid.  </td><td>  -  </td></tr>
     </table>
     */
    public JobPropertyValueDefinition configurationJobPropertiesValuesUpdate(String id, String valueId, List<Path> path) throws ApiException {
        ApiResponse<JobPropertyValueDefinition> localVarResp = configurationJobPropertiesValuesUpdateWithHttpInfo(id, valueId, path);
        return localVarResp.getData();
    }

    /**
     * Update a job property value
     * Update a job property value. Returns an updated job property value object.
     * @param id job property identifier (required)
     * @param valueId job property&#39;s value identifier (required)
     * @param path patch request (optional)
     * @return ApiResponse&lt;JobPropertyValueDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes: * *JOB_PROPERTY_NOT_FOUND* when job property does not exist * *JOB_PROPERTY_VALUE_NOT_FOUND* when job property value does not exist  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> When label being updated conflicts with already existing one. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> with input validation fails or with codes: * *ACTIVE_VALUES_LIMIT_REACHED* when limit of active job property values is reached. * *JSON_PATCH_INVALID* when patch json is invalid.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobPropertyValueDefinition> configurationJobPropertiesValuesUpdateWithHttpInfo(String id, String valueId, List<Path> path) throws ApiException {
        okhttp3.Call localVarCall = configurationJobPropertiesValuesUpdateValidateBeforeCall(id, valueId, path, null);
        Type localVarReturnType = new TypeToken<JobPropertyValueDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a job property value (asynchronously)
     * Update a job property value. Returns an updated job property value object.
     * @param id job property identifier (required)
     * @param valueId job property&#39;s value identifier (required)
     * @param path patch request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes: * *JOB_PROPERTY_NOT_FOUND* when job property does not exist * *JOB_PROPERTY_VALUE_NOT_FOUND* when job property value does not exist  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> When label being updated conflicts with already existing one. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> with input validation fails or with codes: * *ACTIVE_VALUES_LIMIT_REACHED* when limit of active job property values is reached. * *JSON_PATCH_INVALID* when patch json is invalid.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationJobPropertiesValuesUpdateAsync(String id, String valueId, List<Path> path, final ApiCallback<JobPropertyValueDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationJobPropertiesValuesUpdateValidateBeforeCall(id, valueId, path, _callback);
        Type localVarReturnType = new TypeToken<JobPropertyValueDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationOfferPropertiesAll
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code **NO_ACCESS_TO_OFFERS** when not permitted to see offers  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationOfferPropertiesAllCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/offer-properties";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationOfferPropertiesAllValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = configurationOfferPropertiesAllCall(_callback);
        return localVarCall;

    }

    /**
     * Get a list of available offer properties
     * Get a list of available offer properties.
     * @return OfferPropertiesDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code **NO_ACCESS_TO_OFFERS** when not permitted to see offers  </td><td>  -  </td></tr>
     </table>
     */
    public OfferPropertiesDefinition configurationOfferPropertiesAll() throws ApiException {
        ApiResponse<OfferPropertiesDefinition> localVarResp = configurationOfferPropertiesAllWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get a list of available offer properties
     * Get a list of available offer properties.
     * @return ApiResponse&lt;OfferPropertiesDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code **NO_ACCESS_TO_OFFERS** when not permitted to see offers  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OfferPropertiesDefinition> configurationOfferPropertiesAllWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = configurationOfferPropertiesAllValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<OfferPropertiesDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of available offer properties (asynchronously)
     * Get a list of available offer properties.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code **NO_ACCESS_TO_OFFERS** when not permitted to see offers  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationOfferPropertiesAllAsync(final ApiCallback<OfferPropertiesDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationOfferPropertiesAllValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<OfferPropertiesDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationReasonsRejectionAll
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationReasonsRejectionAllCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/rejection-reasons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationReasonsRejectionAllValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = configurationReasonsRejectionAllCall(_callback);
        return localVarCall;

    }

    /**
     * Get rejection reasons
     * Get rejection reasons
     * @return Properties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Properties configurationReasonsRejectionAll() throws ApiException {
        ApiResponse<Properties> localVarResp = configurationReasonsRejectionAllWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get rejection reasons
     * Get rejection reasons
     * @return ApiResponse&lt;Properties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Properties> configurationReasonsRejectionAllWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = configurationReasonsRejectionAllValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Properties>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get rejection reasons (asynchronously)
     * Get rejection reasons
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationReasonsRejectionAllAsync(final ApiCallback<Properties> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationReasonsRejectionAllValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Properties>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationReasonsWithdrawalAll
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationReasonsWithdrawalAllCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/withdrawal-reasons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationReasonsWithdrawalAllValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = configurationReasonsWithdrawalAllCall(_callback);
        return localVarCall;

    }

    /**
     * Get withdrawal reasons
     * Get withdrawal reasons
     * @return Properties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
     </table>
     */
    public Properties configurationReasonsWithdrawalAll() throws ApiException {
        ApiResponse<Properties> localVarResp = configurationReasonsWithdrawalAllWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get withdrawal reasons
     * Get withdrawal reasons
     * @return ApiResponse&lt;Properties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Properties> configurationReasonsWithdrawalAllWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = configurationReasonsWithdrawalAllValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Properties>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get withdrawal reasons (asynchronously)
     * Get withdrawal reasons
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationReasonsWithdrawalAllAsync(final ApiCallback<Properties> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationReasonsWithdrawalAllValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Properties>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationSourceTypes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationSourceTypesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/sources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationSourceTypesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = configurationSourceTypesCall(_callback);
        return localVarCall;

    }

    /**
     * List candidate source types with subtypes
     * Get a list of all available candidate source type with subtypes
     * @return SourceTypes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SourceTypes configurationSourceTypes() throws ApiException {
        ApiResponse<SourceTypes> localVarResp = configurationSourceTypesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List candidate source types with subtypes
     * Get a list of all available candidate source type with subtypes
     * @return ApiResponse&lt;SourceTypes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SourceTypes> configurationSourceTypesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = configurationSourceTypesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SourceTypes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List candidate source types with subtypes (asynchronously)
     * Get a list of all available candidate source type with subtypes
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationSourceTypesAsync(final ApiCallback<SourceTypes> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationSourceTypesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SourceTypes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationSourceValuesAll
     * @param sourceType Source type from /configuration/sources (required)
     * @param sourceSubType Source SubType from  /configuration/sources (optional)
     * @param limit number of elements to return. max value is 100 (optional, default to 100)
     * @param offset number of elements to skip while processing result (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of candidate sources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with codes * **SOURCE_TYPE_AND_SUBTYPE_INVALID** when provided pair (type, subtype) is invalid.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Source not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationSourceValuesAllCall(String sourceType, String sourceSubType, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/sources/{sourceType}/values"
            .replaceAll("\\{" + "sourceType" + "\\}", localVarApiClient.escapeString(sourceType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sourceSubType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceSubType", sourceSubType));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationSourceValuesAllValidateBeforeCall(String sourceType, String sourceSubType, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sourceType' is set
        if (sourceType == null) {
            throw new ApiException("Missing the required parameter 'sourceType' when calling configurationSourceValuesAll(Async)");
        }
        

        okhttp3.Call localVarCall = configurationSourceValuesAllCall(sourceType, sourceSubType, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * List candidate sources
     * Get a list of all available candidate sources by type.
     * @param sourceType Source type from /configuration/sources (required)
     * @param sourceSubType Source SubType from  /configuration/sources (optional)
     * @param limit number of elements to return. max value is 100 (optional, default to 100)
     * @param offset number of elements to skip while processing result (optional, default to 0)
     * @return Sources
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of candidate sources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with codes * **SOURCE_TYPE_AND_SUBTYPE_INVALID** when provided pair (type, subtype) is invalid.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Source not found </td><td>  -  </td></tr>
     </table>
     */
    public Sources configurationSourceValuesAll(String sourceType, String sourceSubType, Integer limit, Integer offset) throws ApiException {
        ApiResponse<Sources> localVarResp = configurationSourceValuesAllWithHttpInfo(sourceType, sourceSubType, limit, offset);
        return localVarResp.getData();
    }

    /**
     * List candidate sources
     * Get a list of all available candidate sources by type.
     * @param sourceType Source type from /configuration/sources (required)
     * @param sourceSubType Source SubType from  /configuration/sources (optional)
     * @param limit number of elements to return. max value is 100 (optional, default to 100)
     * @param offset number of elements to skip while processing result (optional, default to 0)
     * @return ApiResponse&lt;Sources&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of candidate sources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with codes * **SOURCE_TYPE_AND_SUBTYPE_INVALID** when provided pair (type, subtype) is invalid.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Source not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Sources> configurationSourceValuesAllWithHttpInfo(String sourceType, String sourceSubType, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = configurationSourceValuesAllValidateBeforeCall(sourceType, sourceSubType, limit, offset, null);
        Type localVarReturnType = new TypeToken<Sources>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List candidate sources (asynchronously)
     * Get a list of all available candidate sources by type.
     * @param sourceType Source type from /configuration/sources (required)
     * @param sourceSubType Source SubType from  /configuration/sources (optional)
     * @param limit number of elements to return. max value is 100 (optional, default to 100)
     * @param offset number of elements to skip while processing result (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of candidate sources </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with codes * **SOURCE_TYPE_AND_SUBTYPE_INVALID** when provided pair (type, subtype) is invalid.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Source not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationSourceValuesAllAsync(String sourceType, String sourceSubType, Integer limit, Integer offset, final ApiCallback<Sources> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationSourceValuesAllValidateBeforeCall(sourceType, sourceSubType, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<Sources>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationSourceValuesSingle
     * @param sourceType Source type from /configuration/sources (required)
     * @param sourceValueId Source id (required)
     * @param sourceSubType Source SubType from  /configuration/sources (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Source </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with codes: * **SOURCE_TYPE_INVALID** when provided type does not exist, * **SUBTYPE_REQUIRED** when there are more sources and subtype parameter is required, * **SOURCE_TYPE_AND_SUBTYPE_INVALID** when provided pair (type, subtype) is invalid.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Source with given source value id not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationSourceValuesSingleCall(String sourceType, String sourceValueId, String sourceSubType, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/sources/{sourceType}/values/{sourceValueId}"
            .replaceAll("\\{" + "sourceType" + "\\}", localVarApiClient.escapeString(sourceType.toString()))
            .replaceAll("\\{" + "sourceValueId" + "\\}", localVarApiClient.escapeString(sourceValueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sourceSubType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceSubType", sourceSubType));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationSourceValuesSingleValidateBeforeCall(String sourceType, String sourceValueId, String sourceSubType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sourceType' is set
        if (sourceType == null) {
            throw new ApiException("Missing the required parameter 'sourceType' when calling configurationSourceValuesSingle(Async)");
        }
        
        // verify the required parameter 'sourceValueId' is set
        if (sourceValueId == null) {
            throw new ApiException("Missing the required parameter 'sourceValueId' when calling configurationSourceValuesSingle(Async)");
        }
        

        okhttp3.Call localVarCall = configurationSourceValuesSingleCall(sourceType, sourceValueId, sourceSubType, _callback);
        return localVarCall;

    }

    /**
     * Get a candidate source
     * Get a single candidate sources for a given type.
     * @param sourceType Source type from /configuration/sources (required)
     * @param sourceValueId Source id (required)
     * @param sourceSubType Source SubType from  /configuration/sources (optional)
     * @return Source
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Source </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with codes: * **SOURCE_TYPE_INVALID** when provided type does not exist, * **SUBTYPE_REQUIRED** when there are more sources and subtype parameter is required, * **SOURCE_TYPE_AND_SUBTYPE_INVALID** when provided pair (type, subtype) is invalid.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Source with given source value id not found </td><td>  -  </td></tr>
     </table>
     */
    public Source configurationSourceValuesSingle(String sourceType, String sourceValueId, String sourceSubType) throws ApiException {
        ApiResponse<Source> localVarResp = configurationSourceValuesSingleWithHttpInfo(sourceType, sourceValueId, sourceSubType);
        return localVarResp.getData();
    }

    /**
     * Get a candidate source
     * Get a single candidate sources for a given type.
     * @param sourceType Source type from /configuration/sources (required)
     * @param sourceValueId Source id (required)
     * @param sourceSubType Source SubType from  /configuration/sources (optional)
     * @return ApiResponse&lt;Source&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Source </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with codes: * **SOURCE_TYPE_INVALID** when provided type does not exist, * **SUBTYPE_REQUIRED** when there are more sources and subtype parameter is required, * **SOURCE_TYPE_AND_SUBTYPE_INVALID** when provided pair (type, subtype) is invalid.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Source with given source value id not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Source> configurationSourceValuesSingleWithHttpInfo(String sourceType, String sourceValueId, String sourceSubType) throws ApiException {
        okhttp3.Call localVarCall = configurationSourceValuesSingleValidateBeforeCall(sourceType, sourceValueId, sourceSubType, null);
        Type localVarReturnType = new TypeToken<Source>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a candidate source (asynchronously)
     * Get a single candidate sources for a given type.
     * @param sourceType Source type from /configuration/sources (required)
     * @param sourceValueId Source id (required)
     * @param sourceSubType Source SubType from  /configuration/sources (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Source </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with codes: * **SOURCE_TYPE_INVALID** when provided type does not exist, * **SUBTYPE_REQUIRED** when there are more sources and subtype parameter is required, * **SOURCE_TYPE_AND_SUBTYPE_INVALID** when provided pair (type, subtype) is invalid.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Source with given source value id not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationSourceValuesSingleAsync(String sourceType, String sourceValueId, String sourceSubType, final ApiCallback<Source> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationSourceValuesSingleValidateBeforeCall(sourceType, sourceValueId, sourceSubType, _callback);
        Type localVarReturnType = new TypeToken<Source>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
